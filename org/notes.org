#+TITLE: NOTEBOOK - DATA VISUALIZATION
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: DSC 302 Lyon College Fall 2024
#+STARTUP: overview hideblocks indent entitiespretty:
#+PROPERTY: header-args:R :session *R* :results output :exports both
* DONE Week 0 - Orientation & Examples

#+attr_html: :width 200px:
[[../img/Ways-to-Search-Google.jpg]]

What we achieved in our first session: Course orientation, and
critical discussion of a few visualization examples.

* DONE Week 1 - What is Data Visualization & =mtcars= Demo
#+attr_html: :width 600px:
#+caption: Napoleon's Retreat from Moscow - Adolph Northen (1851)
[[../img/napoleon.jpg]]

This file, =notes.org= ([[https://github.com/birkenkrahe/dviz/blob/main/org/notes.org][GitHub]]) contains a log of class activities.

** Project: published [[https://lyon.instructure.com/courses/2629/assignments/32827][1st sprint review instructions]] - get cracking!

** Review questions:

1. What is data science mainly concerned with?
   #+begin_quote
   Data science is mainly concerned with identifying patterns in data
   and interpreting or predicting them.
   #+end_quote
2. Characterize Minard's 1869 chart - how would you describe it in
   your own words?
   #+attr_html: :width 700px:
   [[../img/1_minard.png]]
   #+begin_quote
   The chart ("tableau graphique") is a kind of (1) "Sankey diagram"
   used even today to (2) visualize flow, the change of a quantity
   over time - in this case the dwindling size of Napoleon's army
   during the 1812-1813 Russia campaign that ended with his occupation
   of a (burning) Moscow. Other data shown: (3) geography (location
   and distance), (4) temperature changes along the way, time (during
   the campaign). Fun fact: These diagrams are named after the British
   engineer, who used it in 1898 to represent energy efficiency of a
   steam engine to illustrate how energy was conserved or lost during
   operation ([[https://en.wikipedia.org/wiki/Sankey_diagram#/media/File:JIE_Sankey_V5_Fig1.png][see here]]). It's used by Google (see: [[https://developers.google.com/chart/interactive/docs/gallery/sankey][Google Charts]]).
   #+end_quote
3. (*Discuss with your neighbor:*) How would you rate the quality of
   Minard's chart as a data visualiation - what's good and what's
   perhaps not so good about it?
   #+begin_quote
   | PROS                                         | CONS                                   |
   |----------------------------------------------+----------------------------------------|
   | Brings many different kinds of data together | We're not told where the data are from |
   | Color is used sparingly, focus is on flow    | The chart is in French only            |
   | You can grasp the story with one glance      | Temperature is given in Reaumur        |
   | The chart looks aesthetically pleasing       | The artistic quality is distracting    |
   #+end_quote
4. What are the stages of the "data pipeline"?
   #+begin_quote
   1. Data storage and transformation
   2. Data modeling
   3. Data analysis (EDA)
   4. Data visualization
   5. Data storytelling (insights)
   #+end_quote
5. Which popular commercial data visualization tools do you know?
   #+begin_quote
   *Tableau* (by Salesforce) and *Power BI* (by Microsoft) are the two
   most popular (in business) data visualization tools. They are
   essentially dashboards with integrated data analysis tools. In this
   course, you will get an introduction to Power BI. Another
   super-useful skill is *CAD/CAM* (Computer-Aided Design /
   Computer-Aided Manufacturing). Some of our graduates learnt it in
   high school (!) and used it to enter successful careers. Perhaps we
   can get them to come back and do a workshop for us - any interest?
   #+end_quote
   #+attr_html: :width 600px:
   [[../img/powerbi.png]]

   #+attr_html: :width 600px:
   [[../img/tableau1.png]]
6. What is the main purpose of computing trendlines?
   #+begin_quote
   The main purpose of computing trendlines is to draw statistical
   conclusions from sample data. Here, "statistical" means both using
   mathematical methods in statistics, and "based on probability
   theory" and certain assumptions, which are encapsulated in the
   sample data, especially in its features and records.
   #+end_quote

** Codealong: A simple trendline example using =mtcars= data

See =2_trendline.org= ([[https://github.com/birkenkrahe/dviz/blob/main/org/2_trendline.org][GitHub]])

** Review questions - Shell

1. Login Google Cloud Shell
   #+begin_quote
   URL: =shell.cloud.google.com= or =cloud.google.com/shell=
   #+end_quote
2. Plot directly from the R console
   #+begin_quote
   > png("random.png")    # prepare graphics file (don't create it)
   > plot(rnorm(1000))    # plot 1000 random points to file
   > dev.off()            # close graphics device
   #+end_quote
3. What does the GitHub Hello World Project consist of?
   #+begin_quote
   1. Create a =public= repo[sitory] =hello-world= with a =README= file, a
      =.gitignore= template, and a copyright =LICENSE= file.
   2. Create a new branch called =readme-edits= besides the =main= branch.
   3. Make a change to =README.md= in the =readme-edits= branch.
   4. =Commit= the change (the branches have now diverged).
   5. The =main= branch now has a =pull= request for the changes made.
   6. After checking out the changes, the branches are =merged=.

   Demo: remote updating with =git= on the command-line.
   #+end_quote
4. How can you check in Linux if R is available?
   #+begin_src bash :results output :exports both
     which R      # location of the program (Linux only)
     R --version  # version of the installed program
     R --vanilla  # start R without an environment (for demo only)
   #+end_src

   #+RESULTS:
   #+begin_example
   /usr/bin/R
   R version 4.1.2 (2021-11-01) -- "Bird Hippie"
   Copyright (C) 2021 The R Foundation for Statistical Computing
   Platform: x86_64-pc-linux-gnu (64-bit)

   R is free software and comes with ABSOLUTELY NO WARRANTY.
   You are welcome to redistribute it under the terms of the
   GNU General Public License versions 2 or 3.
   For more information about these matters see
   https://www.gnu.org/licenses/.


   R version 4.1.2 (2021-11-01) -- "Bird Hippie"
   Copyright (C) 2021 The R Foundation for Statistical Computing
   Platform: x86_64-pc-linux-gnu (64-bit)

   R is free software and comes with ABSOLUTELY NO WARRANTY.
   You are welcome to redistribute it under certain conditions.
   Type 'license()' or 'licence()' for distribution details.

     Natural language support but running in an English locale

   R is a collaborative project with many contributors.
   Type 'contributors()' for more information and
   'citation()' on how to cite R or R packages in publications.

   Type 'demo()' for some demos, 'help()' for on-line help, or
   'help.start()' for an HTML browser interface to help.
   Type 'q()' to quit R.

   >
   #+end_example

5. How can you get R? (In Linux or Windows)
   #+begin_quote
   - Linux command-line, run =sudo apt install r-base -y=
   - In Windows: download R binary from r-projects.org
   #+end_quote
6. What is =ess=?
   #+begin_quote
   "Emacs Speaks Statistics" (see [[https://ess.r-project.org][ess.r-project.org]]) is an Emacs
   package that connects Emacs and R so that R can be run inside Emacs
   (also works for other statistical analysis programs).
   #+end_quote
7. How can you get =ess=?
   #+begin_quote
   - Run =M-x list-packages= inside Emacs
   - Find (=C-s=) the =ess= package
   - Mark for install with =i=
   - Run install with =x=
   #+end_quote
8. What is R's workspace?
   #+begin_quote
   The workspace is where all user-defined variables or functions are
   stored to be loaded when R is started next. You can opt to not save
   the workspace when you leave the R console with =q()=.
   #+end_quote
9. How does an R source code block in Org-mode look like?
   #+begin_example Org
     #+begin_src R :session *R* :results output
       ## code
     #+end_src
   #+end_example
10. What is needed to compute & plot a trendline model on a dataset?
    #+begin_quote
    Four R functions:
    1) A dataset (=data=)
    2) A plotting function (=plot=)
    3) A linear regression model function (=lm=)
    4) A way to draw the trendline (=abline=)
    #+end_quote

* DONE Week 2 - Linux Party & Introduction to Visualization
#+attr_html: :width 400px:
[[../img/mtcars_lm.png]]

- [X] Review: First DataCamp lesson
- [X] Google Colab coding platform
- [X] Catching up (or moving fasteR) on R
- [ ] Exploratory Data Analysis with R
- [X] Review: Second DataCamp lesson

** Review: DataCamp's "Visualizing distributions"

*Note:* For the test, you need to know all the concepts mentioned in the
DataCamp lesson, not only the ones that we're reviewing here.

/Fire up your Emacs Org-mode file testR.org to code along./ For a
different experience, use Google Colab at [[https://colab.research.google.com/][colab.research.google.com]].

1. What is a "data distribution"?
   #+begin_quote
   A data distribution is a collection of data points (literally
   points, e.g. (x,y) in the plane) exhibiting a pattern in terms of
   - Centrality (indicating where the data are centered)
   - Spread (degree of distance from the center)
   - Shape (or Gestalt - symmetry)
   - Outliers (points not part of the "central" pattern)
   - Underlying probabilistic distribution (e.g. Gaussian distribution)
   #+end_quote
2. How can you gain insights into data distributions?
   #+begin_quote
   - By calculating summary statistics (mean, median, standard deviation)
   - By running models (linear and logistic regression)
   - By drawing plots (e.g. scatterplots, histograms, barplots)
   #+end_quote
3. What is the "Datasaurus Dozen"?
   #+begin_quote
   The "Datasaurus Dozen" is a dataset created to illustrate the
   importance of visualizing data before analyzing it. The data have
   almost identical summary statistics but totally different visual
   patterns. The data are the bigger version of the "Anscombe
   quartet".
   #+end_quote

   #+begin_src R :session *R* :results output :exports both
     data(anscombe)
     summary(anscombe)
   #+end_src

   #+RESULTS:
   #+begin_example
   x1             x2             x3             x4           y1
    Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260
    1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315
    Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580
    Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501
    3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570
    Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840
          y2              y3              y4
    Min.   :3.100   Min.   : 5.39   Min.   : 5.250
    1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170
    Median :8.140   Median : 7.11   Median : 7.040
    Mean   :7.501   Mean   : 7.50   Mean   : 7.501
    3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190
    Max.   :9.260   Max.   :12.74   Max.   :12.500
   #+end_example

4. What's the difference between continuous and categorical
   variables - can you give examples for each?
   #+begin_quote
   - Continous variables are usually numeric from the (mathematical )
     set of real numbers $\mathbb{R}$. Example: temperature, height.
   - Categorical variables are from a finite, discrete subset that can
     be mapped onto the set of whole numbers $\mathbb{Z}$ (though the
     mapping is more meaningful for ordered sets). Example: countries.
   - In R, categorical variables are represented as =factor= vectors.
   #+end_quote

5. When should you use a histogram and what are you looking for?
   #+begin_quote
   You use histograms to visualize frequencies (counts) of a single,
   continuous variable. Example: water flow through the river =Nile=.

   You're looking for the shape of the frequency distribution.
   #+end_quote

   #+begin_src R :file ../img/nile.png :session *R* :results file graphics output :exports both
     hist(Nile)
   #+end_src

   #+RESULTS:
   [[file:../img/nile.png]]

6. When should you use a boxplot (cat-and-whiskers)?
   #+begin_quote
   You use a boxplot to visualize the distribution of a continuous
   variable split by a categorical variable.

   You use boxplots e.g. to compare the distributions of the
   continuous variable for each category. Example: =ToothGrowth= length
   of Guinea Pigs by vitamin C source =supp=.
   #+end_quote

   #+begin_src R :file ../img/tg.png :session *R* :results file graphics output :exports both
     data(ToothGrowth)
     tg <- ToothGrowth
     boxplot(tg$len ~ tg$supp)
   #+end_src

   #+RESULTS:
   [[file:../img/tg.png]]

** Linux server has arrived

- You should have received your VM server address and password

- Start "Remote Desktop Protocol" on your (Windows) PC

- Enter the server name (e.g. =cslinux01.lyon.edu=) => =Connect=

- Login the =Xorg= session with username = =firstname.lastname= and pw

- Do not shut down or log out of the VM but only close the window

- Download config file with =wget -O .emacs https://tinyurl.com/lyon-emacs=

- Start Emacs and install ESS package with =list-packages= followed by =i=
  and =x= with the cursor on the line of the =ess= package

- To test, create a sample R file =testR.org= with a code block (create
  with =<s <TAB>=) and run it (with =C-c C-c=):
  #+begin_example
  #+property: header-args:R :session *R* :results output
  * Sample file
    #+begin_src R
      str(mtcars)
    #+end_src
  #+end_example

** Review questions "Visualizing two variables" (DataCamp)

1. What is a scatter plot?
   #+begin_quote
   A plot of two continuous variables whose relationship we wish to
   know.
   #+end_quote
   Example:
   #+begin_src R :file ../img/scatter.png :session *R* :results file graphics output :exports both
     plot(x=mtcars$wt,
          y=mtcars$mpg,
          type="p",
          pch=16)
   #+end_src

   #+RESULTS:
   [[file:../img/scatter.png]]

2. The points in a scatter plot are all bunched up in one corner. What
   could you do about that?
   #+begin_quote
   You could transform one, or both axes with some function that
   stretches the scale - e.g. a logarithm or a square function.
   #+end_quote
   Example:
   #+begin_src R :file ../img/scatter2.png :session *R* :results file graphics output :exports both
     ## Assuming you have your data in two vectors: 'area' and 'price'
     ## Example data
     area <- c(500, 1000, 2000, 2500, 3600, 4000, 4500, 5000, 30000, 50000)
     price <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 100)

     ## 1 x 2 plot pane to scale
     par(mfrow=c(1,2),pty="s")

     ## Create scatter plot from the data
     plot(area, price,
          xlab="Area (ft²)",
          ylab="Price (in millions USD)",
          main="Scatter Plot",
          xlim=range(area), ylim=range(price))
     grid()

     ## Create the scatter plot with log-transformed axes
     plot(log10(area), log10(price),
          xlab="Log Area (ft²)",
          ylab="Log Price (in millions USD)",
          main="Log-Transformed",
          xlim=log10(range(area)), ylim=log10(range(price)),
          pch=19)
     grid()
   #+end_src

   #+RESULTS:
   [[file:../img/scatter2.png]]

3. What's a measure of "correlation", and what does it mean?
   #+begin_quote
   A measure of correlation of two vectors of same length x, y is how
   well you can draw a straight line through the points (x,y). High
   correlation means that the values of x and y rise and fall
   together linearly.
   #+end_quote

4. What does a good linear fit through a logarithmic plot mean for the
   distribution in practice?
   #+begin_quote
   A good linear fit in a logarithmic (or semi-logarithmic) plot means
   that the points are exponentially correlated.
   #+end_quote

5. When should you use a line plot? What's an example?
   #+begin_quote
   - You have two continous variables
   - You want to know how their values relate to each other
   - You know that consecutive observations are connected

   An example would be plot of connected observations over time (also
   called a 'time series'). Line plots can be overlayed easily.
   #+end_quote
   Example:
   #+begin_src R :file ../img/ts3.png :session *R* :results file graphics output :exports both
     ## First plot
     plot(Nile,ylab="Flow", main="Overlayed Plot of Nile Data")

     ## Overlay a new plot on top of the existing one
     par(new=TRUE)

     ## Second plot (on top of the first plot)
     plot(Nile+100,
          col="red",
          axes=FALSE,  ## don't print axes
          xlab="",
          ylab="",
          ylim=range(Nile, Nile+100))  ## Ensure the y-limits match the first plot
   #+end_src

   #+RESULTS:
   [[file:../img/ts3.png]]


6. What's the relationship between time as the independent variable
   and a line plot as a suitable visualization?
   #+begin_quote
   - Time on the x-axis (measurements over time) does not always mean
     line-plot, and you don't need time on the x-axis for meaningful
     line plots.

   - In terms of logic, this means that time on the x-axis is neither
     a sufficient nor a necessary criterion for a line plot:
     1) Measurements over time do not lend themselves to line plots if
        the observations are not conceptually connected over
        time. Example: critics scores as a function of songs published
        over time (just a bunch of dots).
     2) A line plot over time may not yield the best insights if
        another variable contains the story. Example: number of
        offenders in different age groups over time.
   #+end_quote

7. What's your view on using COVID-19 data in this introductory
   lesson? Pros and Cons?
   #+begin_quote
   - Pro: highly relevant to today's population, and much discussed
     (though perhaps not so much now). Lots of data to be found.
   - Con: Years after the epidemic, some of the data are highly
     contested and it may be difficult to ascertain their validity.
   #+end_quote

8. When should you use a barplot, and what's an example?
   #+begin_quote
   Bar plots are used when you want counts or percentages of a
   categorical variable. They look similar to histograms, which
   represent counts or frequencies over a continuous numeric variable.

   Example: The =ToothGrowth= dataset has a numeric variable, =len= (tooth
   length), and a categorical variable, =supp= (Vitamin C supply type),
   and we can ask (1) how are the lengths distributed across the
   observations (each being a different guinea pig), and (2) how many
   observations (guinea pigs) were given each supply?
   #+end_quote
   Code examples:
   #+begin_src R :file ../img/len.png :session *R* :results file graphics output :exports both
     ## bar plot of the tooth lengths over all observations
     tg <- ToothGrowth
     barplot(height = tg$len, # better: with `sort`
             xlab = "Guinea pigs", # categorical (independent) variable
             ylab = "Length", # numeric (dependent) variable
             main = "Tooth lengths in ToothGrowth")
   #+end_src

   #+RESULTS:
   [[file:../img/len.png]]

   #+begin_src R :file ../img/supp.png :session *R* :results file graphics output :exports both
     ## bar plot of the number of observations in each supply type dataset
     supp <- table(tg$supp)
     barplot(height = supp)
   #+end_src

   #+RESULTS:
   [[file:../img/supp.png]]

   More interesting:
   #+begin_src R :file ../img/supp2.png :session *R* :results file graphics output :exports both
                                             # More interesting: how many observations in each group had length > 15 mm?
     supp15 <- table(tg$supp[tg$len>15])
     barplot(height = supp15,
             xlab = "Supply type", # categorical (independent) variable
             ylab = "Number of guinea pigs", # numeric (dependent) variable
             main = "Guinea pigs in ToothGrowth with tooth length > 15 mm")
   #+end_src

   #+RESULTS:
   [[file:../img/supp2.png]]

   The same information is, in this simple case much more easily
   obtained with a =table=:
   #+begin_src R :session *R* :results output :exports both
     supp # equal number of guinea pigs in each supply group
     supp15  # different number of guinea pigs in a subset of len > 15 mm
   #+end_src

   #+RESULTS:
   :
   : OJ VC
   : 30 30
   :
   : OJ VC
   : 23 18

9. What are the two versions of bar plots?
   #+begin_quote
   1. Stacked or on top of one another (to show percentages)
   2. Dodged or side-by-side (to show relative heights)
   #+end_quote

10. What is the difference in purpose between box plots and bar plots?
    #+begin_quote
    - Box plots answer questions about spread of a distribution. In
      the example: the spread of age across different royal British
      houses, or the spread of tooth lengths across different supply
      levels.
    - Bar plots answer questions about a single (numeric) metric
      relative to zero (the height). In the example: number of rules
      from different royal British houses. Could pick other (numeric)
      features, e.g. mean age at the start of rule in the example.
    #+end_quote
    #+attr_html: :width 600px:
    [[../img/boxbar1.png]]

    #+attr_html: :width 600px:
    [[../img/boxbar.png]]

11. How do dot plots relate to bar plots?
    #+begin_quote
    - You can plot multiple metrics with them
    - You can use a logarithmic scale with them
    #+end_quote

    #+begin_src R :file ../img/lendot.png :session *R* :results file graphics output :exports both
      tg <- ToothGrowth
      ## bar plot of the tooth lengths over all observations
      dotchart(x = sort(tg$len), # better: with `sort`
               xlab = "Guinea pigs", # categorical (independent) variable
               ylab = "Length", # numeric (dependent) variable
               main = "Tooth lengths in ToothGrowth")
    #+end_src

    #+RESULTS:
    [[file:../img/lendot.png]]

** Exploratory Data Analysis (EDA) with R (Lecture & practice)
#+attr_html: :width 250px:
[[../img/1_textbook.jpg]]

- What if you don't know any R at all?
  #+begin_quote
  I will introduce the necessary commands to you. Vectors and data
  frames are the only data structures that you need, and loops are not
  needed because *vectorization* and the =apply= functions are available.
  #+end_quote

- What if I feel I need more R
  #+begin_quote
  Complete the DataCamp course "Introduction to R" in 2-4 hours on
  your own. If you're in DSC 105, you need to complete this anyway.
  #+end_quote

- What if I don't like DataCamp or I want to move faster?
  #+begin_quote
  Fork & work through Norm Matloff's "fasteR" tutorial on GitHub at
  [[https://github.com/matloff/fasteR][github.com/matloff/fasteR]]. It's the best resource for non-comp-sci
  people available. Matloff is a statistician + computer scientist + R
  champion. His book "The Art of R Programming" is a jewel, too.
  #+end_quote

* DONE Week 3 - Emacs + R + Linux
#+attr_html: :width 400px:
[[../img/R_Emacs_Linux.png]]

/Image: You need to master language, OS, and IDE./

- [X] Quiz 2 is live - complete it by Friday September 6, 11:59 PM
- [X] Enter project team & idea in Canvas ([[https://lyon.instructure.com/courses/2629/pages][wiki]]) by Friday 11 AM
- [X] Emacs: add automatic code block header
- [X] Practice: finish the 'dot plot' example from the DataCamp review
- [X] Review DataCamp lesson "The Color and the Shape"

** Warm-up: The Dark Matter Mystery

What's wrong with this from a data visualization point of view?

#+attr_html: :width 500px:
[[../img/darkmatter.png]]

If you're intrigued and have a lot of time on your hands: [[https://arxiv.org/abs/2406.01705][Here]] is a
review of everything we don't know about Dark Matter (06/2024) by
Cirelli, Strumia and Zupan (arxiv.org preprint - 515 pages).


** Emacs - Add automatic code block headers (a CSC 302 bonus)

Open Zoom + a GUI Emacs (not =emacs -nw=)

1. In Emacs, you can look up variables with =C-h v= - for example =C-h v
   org-babel-C-compiler= (its value is gcc)

2. Look up the variable =org-structure-template-alist=. In the buffer
   that opens, move the cursor to =customize= and click the link,

3. In the next buffer, you see how =<s= works (for a =src= code block), and
   also =<e= (for an =example= block).

4. Move to the end of the page (=M->=) then click on =INS=, and then enter:
   #+begin_example
   Key: r
   Template: src R :session *R* :results output :exports both
   #+end_example
   This will give you =<r=, which will expand to an R code block.

5. Enter another shorthand for graphics:
   #+begin_example
   Key: rg
   Template: src R :file plot.png :results file graphics output :session *R* :exports both
   #+end_example
   This gives you a code block for graphics output - =plot.png= is the
   name of your plot image file (you can change it when you code).

6. In the same way you could add a short code for the =#+PROPERTY:= line
   if you wanted to.

7. Before leaving this buffer, go back up (=M-<=) and click on =Apply and
   Save= - this will add the customization to your =.emacs= configuration
   file.

8. The other useful shorthand is the =#+startup= meta data at the top of
   each file. This is run by another variable, =org-tempo-keywords-alist=.

9. Open it's menu with =C-h v org-tempo-keywords-alist=.

10. Again, find and click on =customize=.

11. In the customization buffer, Go to the end of the list and insert with =INS=:
    #+begin_example
    Key: S
    Keyword: STARTUP: overview hideblocks indent
    #+end_example

12. At the top, click on =Apply and Save= to fix the setting.

13. These settings should be active right away but they will certainly
    be active when you open Emacs next.


** Test block header and learn more about the shells

Test the new setup in a =.org= file with a graphics command:

1. Enter =<rg <TAB>=

2. In the code block, add =Nile.png= after the =:file= header argument

3. Add and run the code =hist(Nile)=

4. You should get the following result: code block with =#+RESULTS=
   block and link to the graphics file that you can open with =<F6>=
   or in another buffer with =C-c C-o=:

   #+begin_src R :file ../img/Nile2.png :session *R* :results file graphics output :exports both
     hist(Nile)
   #+end_src

   #+RESULTS:
   [[file:../img/Nile2.png]]

5. If you don't see a file then your Org-mode buffer and the =*R*=
   session console are not in sync, and you need to change working
   directory to where you're putting the file: in the case of =:file
   Nile.png= you're putting it into =pwd= or =$PWD= (present working
   directory). To check the directory of your file:
   #+begin_src bash :results output :exports both
     pwd
   #+end_src

   #+RESULTS:
   : /home/aletheia/GitHub/dviz/org

6. Open the =*R*= buffer, check its =$PWD= with one of these R commands:
   #+begin_src R :session *R* :results output :exports both
     getwd()
     system("echo $PWD")
   #+end_src

   #+RESULTS:
   : [1] "/home/aletheia/GitHub/dviz/org"
   : /home/aletheia/GitHub/dviz/org

7. To change the R console's =$PWD=, use =setwd= and pass the directory
   you want to point at as a string with the (relative) =PATH=
   argument (as long as the location exists):
   #+begin_src R :session *R* :results output :exports both
     getwd()  # where you were
     setwd("../../dviz/org")  # relative path to where the Org-mode file is
     getwd()  # check where you are
   #+end_src

   #+RESULTS:
   : [1] "/home/aletheia/GitHub/dviz/org"
   : [1] "/home/aletheia/GitHub/dviz/org"

8. The absolute path would work, too (as long as it
   exists). Relocating to where you already are does nothing.
   #+begin_src R :session *R* :results output :exports both
     setwd("/home/aletheia/GitHub/dviz/org")  # relative path to where the Org-mode file is
     system("pwd")
   #+end_src

   #+RESULTS:
   : /home/aletheia/GitHub/dviz/org


** Chart and Shell Exercise

1. Close your R console. (=C-x k=)

2. Go to your home directory (=C-x d ~/=)

3. Make a new directory in the =Dired= buffer with =+ org=

4. Find the directory and go into it

5. In =~/org=, create a file =test.org=

6. In =test.org=, open a graphic R code block

7. Set the file header argument so that you get a PNG file

8. Create a sorted dot plot of the length of the guinea pig teeth
   from the =ToothGrowth= dataset:
   #+begin_example R
     dotchart(sort(ToothGrowth$len))
   #+end_example

9. When asked for the "R starting project directory", modify the
   offered address and change it from =~/org= to =~/=

10. Open the file with =<F6>=. You shouldn't see anything

11. Split the screen and open the R console in one, and the file
    =test.org= in the other buffer

12. You should see that =*R*= is set to your =$HOME=.

13. Create another (non-graphic) R code block (keep =*R*= open)

14. In the other code block check where you are - both with an R
    function, and with a =system= command

15. You know that your test file is in =~/org=. Now set the working
    directory to that directory using a /relative path/, and check the
    new location.

16. Re-run the graphics command from earlier and open the PNG file
    with =<F6>=.

17. Make sure that you understand everything we're doing here! Create
    your own examples!


** Review: DataCamp lesson "The Color and the Shape"

/Emacs tip: to move up / down through a list, use =C-c C-p= / =C-c C-n=./

*** What's the problem with 3D scatter plots?
#+begin_quote
A three-dimensional object on a two-dimensional screen is hard to
interpret because you lose the sense of perspective or depth
perception.
#+end_quote

Code example:
#+begin_src R :file ../img/3d_scatterplot.png :session *R* :results file graphics output :exports both
  library(scatterplot3d)

  scatterplot3d(mtcars$wt, mtcars$mpg, mtcars$hp,
                color = as.numeric(mtcars$cyl))
#+end_src

#+RESULTS:
[[file:../img/3d_scatterplot.png]]

*** What are visual dimensions for scatter plots besides spatial dimensions?
#+begin_quote
- Color
- Size
- Transparency
- Shape
#+end_quote
*** Code examples
**** Color

Create graphics code block with =<rg TAB= then enter code and run with
C-c C-c:

#+begin_src R :file ../img/colorPlot.png :session *R* :results file graphics output :exports both
  plot(x=mtcars$wt,
       y=mtcars$mpg,
       col = as.factor(mtcars$cyl)) # encode cyl category as color
#+end_src

#+RESULTS:
[[file:../img/colorPlot.png]]

**** Size
#+begin_src R :file ../img/sizePlot.png :session *R* :results file graphics output :exports both
  point_size = mtcars$cyl / max(mtcars$cyl) * 3

  plot(mtcars$wt, mtcars$mpg,
       cex = point_size)
#+end_src

#+RESULTS:
[[file:../img/sizePlot.png]]

**** Transparency
#+begin_src R :file  ../img/transPlot.png :session *R* :results file graphics output :exports both
  transparency <- mtcars$cyl / max(mtcars$cyl)

  plot(mtcars$wt, mtcars$mpg,
       col = rgb(1, 0, 0, alpha = transparency),# sets transparency in [0,1]
       pch=19, # solid points
       cex=2) # double size
#+end_src

#+RESULTS:
[[file:../img/transPlot.png]]

**** Shape
#+begin_src R :file  ../img/shapePlot2.png :session *R* :results file graphics output :exports both
  ## Create scatter plot with shapes based on mtcars$cyl
  plot(mtcars$wt, mtcars$mpg,
       pch = mtcars$cyl)  ## Adjust shape based on cylinder count
#+end_src

#+RESULTS:
[[file:../img/shapePlot2.png]]

*** What are visual dimensions for line plots?
#+begin_quote
- Color
- Thickness
- Transparency
- Line type (solid, dashes, dots)
#+end_quote
*** Code examples
**** Color
#+begin_src R :file  ../img/lineColor.png :session *R* :results file graphics output :exports both
  plot(Nile,
       col="blue")
#+end_src

#+RESULTS:
[[file:../img/lineColor.png]]

**** Thickness
#+begin_src R :file  ../img/lineThick.png :session *R* :results file graphics output :exports both
  plot(Nile,
       lwd=10)
#+end_src

#+RESULTS:
[[file:../img/lineThick.png]]

**** Transparency
#+begin_src R :file  ../img/lineTrans.png :session *R* :results file graphics output :exports both
  plot(Nile,
       lwd=3,
       col = rgb(1, 0, 0, alpha=0.2))
#+end_src

#+RESULTS:
[[file:../img/lineTrans.png]]

**** Line type
#+begin_src R :file  ../img/lineType.png :session *R* :results file graphics output :exports both
  plot(Nile,
       lty=3)
#+end_src

#+RESULTS:
[[file:../img/lineType.png]]


*** What does this plot (from the DataCamp lesson) suggest? How would you critique it?
#+attr_html: :width 400px:
[[../img/color2.png]]

#+begin_quote
"The longer someone goes to school in a wealthy country, the longer he
will live." = Life expectancy, wealth index, schooling length are all
positively correlated.

However:
- We don't know what "schooling" means.
- We don't know the definition or distribution of GNI or life
  expectancy.
- We don't know how or when these data were collected.

It is always potentially misleading and dangerous to throw visuals at
an audience (the more so if the audience is likely to care about it):
- Now people want to go to school longer (should they?)
- They want to get wealthier (should they?)
- They want to live in wealthier countries (should they?)
#+end_quote

* DONE Week 4 - Exploratory Data Analysis (EDA)
#+attr_html: :width 600px:
[[../img/Christ-Rescuing-Peter-from-Drowning-1370_.jpg]]

/Image: Christ rescuing Peter from drowning (Veneziano, 1370)/

Housekeeping:
- [X] New quiz coming at you later today
- [X] New DataCamp lessons live: Data visualization with ~ggplot2~
- [X] Will (probably) change syllabus and continue with ~plotly~
- [X] A couple of you did not meet the DataCamp deadline: watch it!
- [X] If you submit late or if I made a grading mistake: let me know!
- [X] *Several of you missed a project deadline (Canvas list)*

Content:
- [X] Review package installation (~scatterplot3d~)
- [X] Finish review DataCamp lesson "The Color and the Shape" (plots!)
- [ ] Continue "Exploratory Data Analysis" lecture (with practice)
- [ ] Review: debugging R graphics
- [ ] Review: meta data

** Review: Debugging R graphics in Emacs Org-mode

- You have an error in your code block header (all data after the
  error are ignored)

- Your graphics file name does not end in .png (not recognized as
  graphics)

- Your R session looks at the wrong directory (not where your .org
  file is - check with =getwd()= where you are and change with =setwd=)

** Review: package installation
#+attr_html: :width 400px:
[[../img/R_Emacs_Linux2.png]]

I thought it might be worth sketching the process of R package
installation again that we went through at the end of the last
session:

1) To install a package, use the R command =install.packages= - this
   means that the command is executed either in an R code block, or on
   the R console (which runs behind the code block).

2) Since you were trying to install the package ~scatterplot3d~ without
   sysadmin (root) privileges, the Operating System (OS) refused to
   let you install it together with all the other R files - on my
   Linux system that is ~/usr/lib/R~.

3) The =install.packages= command in the code block was stalled because
   the system needed a response from you: a yes/no if you're OK to
   store the package files locally in your =$HOME= directory (in ~~/R~).

4) To have this dialog with the OS, you had to open a regular R
   console. This is where we installed the package.

5) Every time the R program starts a console, it loads its
   environment, including freshly installed packages. Every shell
   works like that: If you change an environment setting (like the
   =$PATH= to a file), you need to restart the shell.

6) Hence, we had to restart the R console that sits behind the
   Org-mode test file. Now the package =scatterplot3d= could be found
   and loaded into the session with =library(scatterplot3d)= so that the
   functions in the package were available to produce the plot!

** Review: meta data

1. Would "talking about this lecture" be considered meta data?

   #+begin_quote
   Talking about anything at all goes "beyond" or "with" the subject
   that is being talked about and hence it qualifies as meta data.

   However, until the "talking" is quantified and stored, the meta
   data cannot be analyzed.

   #+end_quote

2. Data can only be analyzed computationally when they're quantified
   (quality turned into numeric or categorical values). What about
   meta data? Which analysis methods are most important?

   #+begin_quote
   Meta data are data with a different context, meaning and function
   but otherwise "meta data analysis" is first of all data analysis.

   A lot of meta data are plain text, which means that text mining
   methods are important for meta data analysis.
   #+end_quote

3. What are the common issues with meta data?

   #+begin_quote
   Same as with data but often harder to guarantee because proper meta
   data maintenance is more difficult and less common:

   - Are the data complete?

   - Are the data consistent?

   - Are the data correct?

   #+end_quote

** Exploratory Data Analysis (EDA) with R (Lecture & practice)
#+attr_html: :width 600px:
[[../img/jules_verne.jpg]]

/Image: Les illustrations de Jules Verne - Voyages Extraordinaires./

- [X] *Practice:* meta data
- [X] Missing values (=NA=)
- [ ] Categorical variables and =factor= vectors
- [ ] *Practice:* Plotting the Anscombe Quartet
- [ ] Raw vs. transformed data
- [ ] Math revision: logarithm and power laws
- [ ] The case for R
- [ ] Installing and loading R packages
- [ ] *Practice:* Using Rterm and Rgui
- [ ] Questions to ask from data
- [ ] *Practice:* A representative R session

* DONE Week 5 - EDA: "Ceci n'est pas une pipe"
#+attr_html: :width 600px:
[[../img/MagrittePipe.jpg]]

/Image: Rene Margritte, Ceci n'est pas une pipe./

** Review questions (last week)

1. What do you remember from the last session? Run one command that
   you remember!
   #+begin_example R
   1. install.packages("remotes")
   2. require(remotes)
   3. install_version("MASS", version="7.3.54")
   4. library(MASS)
   5. search()
   6. ls("package:MASS")
   7. data(package="MASS")$results[,"Item"] -> datasets
   8. datasets[grep("Pima",datasets)]
   9. any(is.na(Pima.tr2))
   10. summary(Pima.tr2)
   11. mean(Pima.tr2)
   12. ?mean
   #+end_example

2. Why may you have to install an older version of an R package?
   #+begin_quote
   You may have to install an older version of an R package if your
   version of R (=version=) is out of sync with the latest package
   version. This was the case for the MASS package (required R > 4.4).
   #+end_quote

   #+begin_src R :session *R* :results output :exports both :noweb yes
     version
   #+end_src

   #+RESULTS:
   #+begin_example
                  _
   platform       x86_64-pc-linux-gnu
   arch           x86_64
   os             linux-gnu
   system         x86_64, linux-gnu
   status
   major          4
   minor          1.2
   year           2021
   month          11
   day            01
   svn rev        81115
   language       R
   version.string R version 4.1.2 (2021-11-01)
   nickname       Bird Hippie
   #+end_example

3. How can you get an overview of the functions in a package,
   e.g. =MASS=?
   #+begin_src R :session *R* :results output :exports both
     ls("package:MASS")
   #+end_src

   #+RESULTS:
   #+begin_example
     [1] "abbey"             "accdeaths"         "addterm"           "Aids2"
     [5] "Animals"           "anorexia"          "area"              "as.fractions"
     [9] "bacteria"          "bandwidth.nrd"     "bcv"               "beav1"
    [13] "beav2"             "biopsy"            "birthwt"           "Boston"
    [17] "boxcox"            "cabbages"          "caith"             "Cars93"
    [21] "cats"              "cement"            "chem"              "con2tr"
    [25] "contr.sdif"        "coop"              "corresp"           "cov.mcd"
    [29] "cov.mve"           "cov.rob"           "cov.trob"          "cpus"
    [33] "crabs"             "Cushings"          "DDT"               "deaths"
    [37] "denumerate"        "dose.p"            "drivers"           "dropterm"
    [41] "eagles"            "enlist"            "epil"              "eqscplot"
    [45] "farms"             "fbeta"             "fgl"               "fitdistr"
    [49] "forbes"            "fractions"         "frequency.polygon" "GAGurine"
    [53] "galaxies"          "gamma.dispersion"  "gamma.shape"       "gehan"
    [57] "genotype"          "geyser"            "gilgais"           "ginv"
    [61] "glm.convert"       "glm.nb"            "glmmPQL"           "hills"
    [65] "hist.FD"           "hist.scott"        "housing"           "huber"
    [69] "hubers"            "immer"             "Insurance"         "is.fractions"
    [73] "isoMDS"            "kde2d"             "lda"               "ldahist"
    [77] "leuk"              "lm.gls"            "lm.ridge"          "lmsreg"
    [81] "lmwork"            "loglm"             "loglm1"            "logtrans"
    [85] "lqs"               "lqs.formula"       "ltsreg"            "mammals"
    [89] "mca"               "mcycle"            "Melanoma"          "menarche"
    [93] "michelson"         "minn38"            "motors"            "muscle"
    [97] "mvrnorm"           "nclass.freq"       "neg.bin"           "negative.binomial"
   [101] "negexp.SSival"     "newcomb"           "nlschools"         "npk"
   [105] "npr1"              "Null"              "oats"              "OME"
   [109] "painters"          "parcoord"          "petrol"            "phones"
   [113] "Pima.te"           "Pima.tr"           "Pima.tr2"          "polr"
   [117] "psi.bisquare"      "psi.hampel"        "psi.huber"         "qda"
   [121] "quine"             "Rabbit"            "rational"          "renumerate"
   [125] "rlm"               "rms.curv"          "rnegbin"           "road"
   [129] "rotifer"           "Rubber"            "sammon"            "select"
   [133] "Shepard"           "ships"             "shoes"             "shrimp"
   [137] "shuttle"           "Sitka"             "Sitka89"           "Skye"
   [141] "snails"            "SP500"             "stdres"            "steam"
   [145] "stepAIC"           "stormer"           "studres"           "survey"
   [149] "synth.te"          "synth.tr"          "theta.md"          "theta.ml"
   [153] "theta.mm"          "topo"              "Traffic"           "truehist"
   [157] "ucv"               "UScereal"          "UScrime"           "VA"
   [161] "waders"            "whiteside"         "width.SJ"          "write.matrix"
   [165] "wtloss"
   #+end_example

4. How can you filter a dataset for a pattern?
   #+begin_src R :session *R* :results output :exports both
     course <- "The number of this course is DSC 302"
     class(course)  # give me the data type
     grep("DSC", course) # search for DSC in string
   #+end_src

   #+RESULTS:
   : [1] "character"
   : [1] 1

   Another example:
   #+begin_src R :session *R* :results output :exports both
     course2 <- unlist(strsplit(course," "))
     course2
     is.vector(course2)
     grep("DSC", course2)
   #+end_src

   #+RESULTS:
   : [1] "The"    "number" "of"     "this"   "course" "is"     "DSC"    "302"
   : [1] TRUE
   : [1] 7

   #+begin_src bash :results output
     echo "This is DSC 302" | grep DSC  # linux command 'grep'
   #+end_src

   #+RESULTS:
   : This is DSC 302

5. How can you get the average of the =bp= feature of =Pima.tr2= and what
   do you have to look out for?
   #+begin_src R :session *R* :results output :exports both :noweb yes
     library(MASS)  # package
     data(Pima.tr2)   # dataset in MASS
     ls()
     str(Pima.tr2)
     mean(Pima.tr2$bp,na.rm=TRUE)  # average & remove missing values
   #+end_src

   #+RESULTS:
   #+begin_example
   [1] "anscombe"       "area"           "course"         "course2"        "cyl"
    [6] "cyl_gear_table" "d"              "d.0"            "d0"             "d00"
   [11] "dd"             "df"             "df_ex"          "df_fac"         "df_lin"
   [16] "df_nonlin"      "df2"            "dt"             "DT"             "fac"
   [21] "foo"            "gear"           "i"              "ID"             "items"
   [26] "L3"             "mtcars"         "mtcars_list"    "Pima.tr2"       "point_size"
   [31] "price"          "sex"            "sexf"           "small"          "store"
   [36] "supp"           "supp15"         "tg"             "ToothGrowth"    "transparency"
   [41] "whiteside"      "x"              "x1"             "y"              "y1"
   'data.frame':        300 obs. of  8 variables:
    $ npreg: int  5 7 5 0 0 5 3 1 3 2 ...
    $ glu  : int  86 195 77 165 107 97 83 193 142 128 ...
    $ bp   : int  68 70 82 76 60 76 58 50 80 78 ...
    $ skin : int  28 33 41 43 25 27 31 16 15 37 ...
    $ bmi  : num  30.2 25.1 35.8 47.9 26.4 35.6 34.3 25.9 32.4 43.3 ...
    $ ped  : num  0.364 0.163 0.156 0.259 0.133 ...
    $ age  : int  24 55 35 26 23 52 25 24 63 31 ...
    $ type : Factor w/ 2 levels "No","Yes": 1 2 1 1 1 2 1 1 1 2 ...
   [1] 72.32056
   #+end_example

   #+begin_src R :session *R* :results output :exports both :noweb yes
     mean(c(1,2,3,NA),na.rm=TRUE)
   #+end_src

   #+RESULTS:
   : [1] 2

6. How can I quickly find out if a dataset has any NAs?
   #+begin_src R :session *R* :results output :exports both :noweb yes
     summary(Pima.tr2$bp)
   #+end_src

   #+RESULTS:
   :    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
   :   38.00   64.00   72.00   72.32   80.00  114.00      13

** Review questions (Monday session)

1. What is a =level= in R? Example?
   #+begin_quote
   - In R, a =level= is a category or discrete value. The distinct
     values of categorical variables are also called "levels".

   - For example, the vector =c("male","male","female")= has two levels,
     =male= and =female=, and three =character= elements.
   #+end_quote
   #+begin_src R
     sex <- c("male","male","female")
     sex
     str(sex)
   #+end_src

   #+RESULTS:
   : [1] "male"   "male"   "female"
   : chr [1:3] "male" "male" "female"

2. What is a =factor= in R? Example?
   #+begin_quote
   - A factor is a =vector= with =levels=. There is also a function =factor=
     that turns a =vector= into a factor vector.

   - Example: =factor= of =c("male","male","female")=
   #+end_quote
   #+begin_src R
     sexf <- factor(sex)
     sexf
     str(sexf)
   #+end_src

   #+RESULTS:
   : [1] male   male   female
   : Levels: female male
   : Factor w/ 2 levels "female","male": 2 2 1

3. What types of categorical variables are there? Examples?
   #+begin_quote
   - Nominal categorical variables: Their levels are not 'naturally'
     ordered ( e.g. animals, ZIP codes).

   - Ordinal categorical variables: Their levels are naturally ordered
     (e.g. magnitude, feelings).
   #+end_quote

4. Why do we bother with categorical variables?
   #+begin_quote
   Categorical variables hold values that are most dear to us - they
   encapsulate qualitative, rather than quantitative data.

   For data analysis (other than grouping), qualitative data must be
   converted to quantitative data (= abstraction = loss of meaning).
   #+end_quote

5. How are =factor= =levels=, category values, encoded in R?
   #+begin_quote
   In R =data.frame= structures, factor levels are encoded as positive
   integers (labels)
   #+end_quote
   #+begin_src R
     str(ToothGrowth$supp) # vitamin supply type in `ToothGrowth` data frame
   #+end_src

   #+RESULTS:
   :  Factor w/ 2 levels "OJ","VC": 2 2 2 2 2 2 2 2 2 2 ...

** Review questions (Wednesday session)

1. What's special about some R functions like =plot=, =summary=?
   #+begin_quote
   They are "generic" functions because they can digest multiple types
   of data structures.
   #+end_quote
   #+begin_src R
     methods(plot)
   #+end_src

   #+RESULTS:
   #+begin_example
    [1] plot,ANY-method      plot,color-method    plot.acf*            plot.correspondence*
    [5] plot.data.frame*     plot.decomposed.ts*  plot.default         plot.dendrogram*
    [9] plot.density*        plot.ecdf            plot.factor*         plot.formula*
   [13] plot.function        plot.ggplot*         plot.gtable*         plot.hcl_palettes*
   [17] plot.hclust*         plot.histogram*      plot.HoltWinters*    plot.isoreg*
   [21] plot.lda*            plot.lm*             plot.mca*            plot.medpolish*
   [25] plot.mlm*            plot.ppr*            plot.prcomp*         plot.princomp*
   [29] plot.profile*        plot.profile.nls*    plot.R6*             plot.raster*
   [33] plot.ridgelm*        plot.spec*           plot.stepfun         plot.stl*
   [37] plot.table*          plot.transform*      plot.ts              plot.tskernel*
   [41] plot.TukeyHSD*
   see '?methods' for accessing help and source code
   #+end_example

2. What if you pass any old data set to =plot=? What will these plot:
   - The =anscombe= data set
   - The =mtcars= data set
   - The =ToothGrowth= data set
   - The =Nile= data set

   #+begin_quote
   You get a pair plot - a plot of all variables with one another.
   #+end_quote
   #+begin_src R :file  ../img/pairplot.png :session *R* :results file graphics output :exports both
     plot(anscombe)
   #+end_src

   #+RESULTS:
   [[file:../img/pairplot.png]]


3. How can you divide a plot into four different quadrants (facets)?
   #+begin_src R :results none
     par(mfrow=c(2,2)) # nothing to see here
   #+end_src
   #+begin_quote
   If you run this in a code block, an empty pane will open.
   #+end_quote

4. How can you draw a whole plot (not just some graphics elements,
   like a legend, text, or a line) on top of another one?
   #+begin_src R :file  ../img/par.png :session *R* :results file graphics output :exports both
     hist(Nile)
     par(new=TRUE)
     plot(rnorm(1000))
   #+end_src

   #+RESULTS:
   [[file:../img/par.png]]

5. What's a specialty of R with regard to computer architecture?
   #+begin_quote
   R is limited to "in-memory processing":
   - One positive side effect of this is /vectorization/ - the ability
     to efficiently operate on whole data sets at once.
   - One negative side effect is that you cannot run "out-of-core
     algorithms", all data must be loaded into memory for processing.
   - The disadvantage can be overcome by mixing R with languages that
     can perform out-of-core algorithms like C++ or SQL.
   #+end_quote

** Recommended: Feynman on the scientific method

[[https://t.co/jnwRMsj3XO][I shared the video (10 min) in the Google chat.]]

** EDA lecture & practice

- [X] *Practice:* meta data
- [X] Missing values (=NA=)
- [X] Categorical variables and =factor= vectors
- [X] *Practice:* Plotting the Anscombe Quartet
- [X] Raw vs. transformed data
- [ ] Math revision: logarithm and power laws
- [X] The case for R
- [X] Installing and loading R packages
- [X] *Practice:* Using Rterm and Rgui
- [X] Questions to ask from data
- [X] *Practice:* A representative R session

* DONE Week 6 - EDA Lab with =MASS::whiteside=
#+attr_html: :width 600px:
#+caption:Photo Credit: © CORBIS/Corbis via Getty Images
[[../img/neptune.png]]

09/23/1846: German astronomer Johann Gottfried Galle discovers the
planet Neptune at the Berlin Observatory. See also: AWS Neptune.

+ [X] Emacs tip: browsing with =eww=
+ [X] Sample EDA session:
  - [X] Looking at data
  - [X] Factor vectors
  - [X] Summary statistics
  - [X] Box plots
  - [X] Scatterplots
  - [X] Barplots
  - [X] Customization

** Emacs tip: browse with =eww=

To open any URL in Emacs, add this line to your ~.emacs~ file and then
#+begin_example
(setq browse-url-browser-function 'eww-browse-url)
#+end_example

You can also just put this in your =*scratch*= buffer and run it with
=M-x eval-buffer=.

Now you can for example open the Solar system mass tree map in an
=*eww*= buffer: [[https://public.tableau.com/static/images/MA/MASSIVE/SolarSystem/1_rss.png][Where is the Solar system's mass?]]

Running =M-x eww= without an argument brings you to your search engine.

** Review questions (Monday session)

1. Provided =whiteside= is loaded, which of these commands will not work?
   #+begin_src R :session *R* :results output :exports both
     library(MASS)
     data(whiteside)

     head(n=1, whiteside)

     head(whiteside,1)

     head(1, x=whiteside)

     head(1, whiteside)
   #+end_src

   #+RESULTS:
   : Insul Temp Gas
   : 1 Before -0.8 7.2
   : Insul Temp Gas
   : 1 Before -0.8 7.2
   : Insul Temp Gas
   : 1 Before -0.8 7.2
   : Error in checkHT(n, dx <- dim(x)) :
   :   invalid 'n' - must have length one when dim(x) is NULL, got 3

   #+begin_quote
   =head(1,whiteside)= will not work because the parameters are
   "positional", identified by position only, and while =x=1= is okay,
   =n = whiteside= is not recognized.
   #+end_quote

2. How can you identify the type of every variable in =whiteside=?
   #+begin_src R :session *R* :results output :exports both
     str(whiteside)
   #+end_src

   #+RESULTS:
   : 'data.frame':      56 obs. of  3 variables:
   :  $ Insul: Factor w/ 2 levels "Before","After": 1 1 1 1 1 1 1 1 1 1 ...
   :  $ Temp : num  -0.8 -0.7 0.4 2.5 2.9 3.2 3.6 3.9 4.2 4.3 ...
   :  $ Gas  : num  7.2 6.9 6.4 6 5.8 5.8 5.6 4.7 5.8 5.2 ...

3. What does =summary= return when applied to a number, e.g. =1=?
   #+begin_src R :session *R* :results output :exports both
     summary(1)
   #+end_src

   #+RESULTS:
   :    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
   :       1       1       1       1       1       1

4. What does =summary= return when applied to a =factor=?
   #+begin_src R :session *R* :results output :exports both
     summary(whiteside$Insul)
   #+end_src

   #+RESULTS:
   : Before  After
   :     26     30

5. What does =summary= return when applied to a =character= vector?
   #+begin_src R :session *R* :results output :exports both
     summary(state.abb)
     summary(factor(state.abb))
   #+end_src

   #+RESULTS:
   :    Length     Class      Mode
   :        50 character character
   : AK AL AR AZ CA CO CT DE FL GA HI IA ID IL IN KS KY LA MA MD ME MI MN MO MS MT NC ND NE NH
   :  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
   : NJ NM NV NY OH OK OR PA RI SC SD TN TX UT VA VT WA WI WV WY
   :  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1

6. How would you check whether =whiteside$Insul= is a =factor=?
   #+begin_src R :session *R* :results output :exports both
     is.factor(whiteside$Insul)
     levels(whiteside$Insul)
     str(whiteside$Insul)
     class(whiteside$Insul)
     typeof(whiteside$Insul)  # not an answer
   #+end_src

   #+RESULTS:
   : [1] TRUE
   : [1] "Before" "After"
   : Factor w/ 2 levels "Before","After": 1 1 1 1 1 1 1 1 1 1 ...
   : [1] "factor"
   : [1] "integer"

7. What happens when you insert a new value into a =factor=?
   #+begin_src R :session *R* :results output :exports both
     x <- as.factor(c("male","female", "female"))
     x
     class(x)

     x[2] <- "Unknown"
     x
   #+end_src

   #+RESULTS:
   : [1] male   female female
   : Levels: female male
   : [1] "factor"
   : Warning message:
   : In `[<-.factor`(`*tmp*`, 2, value = "Unknown") :
   :   invalid factor level, NA generated
   : [1] male   <NA>   female
   : Levels: female male

8. How can you insert a new value into a =factor=?
   #+begin_src R :session *R* :results output :exports both
     x <- as.factor(c("male","female","female"))
     x
     class(x)

     x <- as.character(x)
     x
     class(x)

     x[2] <- "Unknown"
     x
   #+end_src

   #+RESULTS:
   : [1] male   female female
   : Levels: female male
   : [1] "factor"
   : [1] "male"   "female" "female"
   : [1] "character"
   : [1] "male"    "Unknown" "female"

   : [1] "male"   "female" "female"
   : [1] "character"

   : [1] "male"    "Unknown" "female"

9. Is the =as.factor= function generic?
   #+begin_src R :session *R* :results output :exports both
     class(as.factor)
     methods(as.factor)
   #+end_src

   #+RESULTS:
   : [1] "function"
   : no methods found

10. Is the =as.character= function generic?
    #+begin_src R :session *R* :results output :exports both
      class(as.character)
      methods(as.character)
    #+end_src

    #+RESULTS:
    #+begin_example
    [1] "function"
    [1] as.character.cli_no*         as.character.cli_noprint*    as.character.cli_sitrep*
     [4] as.character.condition       as.character.crayon*         as.character.Date
     [7] as.character.default         as.character.error           as.character.factor
    [10] as.character.fractions*      as.character.gList*          as.character.glue*
    [13] as.character.grob*           as.character.hexmode         as.character.ITime*
    [16] as.character.numeric_version as.character.octmode         as.character.path*
    [19] as.character.person*         as.character.POSIXt          as.character.quosure*
    [22] as.character.Rd*             as.character.rlang_error*    as.character.rlang_message*
    [25] as.character.rlang_warning*  as.character.rlib_bytes*     as.character.roman*
    [28] as.character.srcref          as.character.unit*           as.character.vctrs_list_of*
    [31] as.character.vctrs_sclr*     as.character.vctrs_vctr*     as.character.viewport*
    [34] as.character.vpList*         as.character.vpStack*        as.character.vpTree*
    see '?methods' for accessing help and source code
    #+end_example

** Review questions (Wednesday session)
#+attr_html: :width 400px:
[[../img/boxplot.png]]

1. So your grandma sees your class notes and asks "What's a box plot",
   and why do they make you learn this? What's it good for?
   #+begin_quote

A box plot is a graphical representation of
- Tukey's five-number summary (25%, 50% aka median, 75% percentile,
  minimum, maximum)
- the results of R's =summary= function (without the =mean=)

  A box plot is useful to
  - check for outliers (they're shown outside the whiskers)
  - compare numerical distributions of different categories, e.g. the
    numerical length =len= of the two supply categories =supp= in
    =ToothGrowth=.

   #+end_quote

2. Is =boxplot= a generic function? Could you make a box plot of =mtcars=?
   What about a box plot of =Nile=? What about a =factor= vector?
   #+begin_src R :file  ../img/box.png :session *R* :results file graphics output :exports both
     boxplot(mtcars)
   #+end_src

   #+RESULTS:
   [[file:../img/box.png]]

   #+begin_src R :file  ../img/NileBox.png :session *R* :results file graphics output :exports both
     boxplot(Nile,horizontal=TRUE)
     abline(v=mean(Nile),col="red",lwd=3)
   #+end_src

   #+RESULTS:
   [[file:../img/NileBox.png]]

   #+begin_src R :session *R* :results output :exports both :noweb yes
     str(ToothGrowth$supp)
   #+end_src

   #+RESULTS:
   :  Factor w/ 2 levels "OJ","VC": 2 2 2 2 2 2 2 2 2 2 ...

   #+begin_src R :file  ../img/suppBox.png :session *R* :results file graphics output :exports both
     boxplot(ToothGrowth$supp)
   #+end_src

   #+RESULTS:
   [[file:../img/suppBox.png]]

   #+begin_src R :session *R* :results output :exports both
     summary(ToothGrowth$supp)
   #+end_src

   #+RESULTS:
   : OJ VC
   : 30 30

   #+begin_src R :file  ../img/factorBox.png :session *R* :results file graphics output :exports both
     foo <- as.factor(c("male","male","male","female"))
     boxplot(foo)
   #+end_src

   #+RESULTS:
   [[file:../img/factorBox.png]]

   #+begin_src R :session *R* :results output :exports both
     summary(foo)
   #+end_src

   #+RESULTS:
   : female   male
   :      1      3

3. What does the 'ab' in =abline= refer to, and how can you draw a
   vertical/horizontal line through any plot?
   #+begin_quote
   a: slope, b: intercept of the line y = a x + b
   #+end_quote

   #+begin_src R :file  ../img/abline.png :session *R* :results file graphics output :exports both
     plot.new()
     abline(v=0.5,col="blue",lwd=3)
     abline(h=0.5,col="red",lwd=3)
   #+end_src

   #+RESULTS:
   [[file:../img/abline.png]]

** EDA Lab
#+attr_html: :width 400px:
[[../img/lab2.jpg]]

- [X] Install =MASS= package with =whiteside= dataset
- [X] Look at the data (with understanding)
- [X] Factor vectors (modified)
- [X] Summary statistics (qualified)
- [ ] Plotting: boxplots
- [ ] Plotting: scatterplots
- [ ] Plotting: barplots

** Next week:
#+attr_html: :width 600px:
[[../img/mammals.jpg]]

- Another lab (with =MASS::mammals=) will follow next week
- We will also review =ggplot2= commands and theory
- I will give you a lecture (with practice) on "graphics"

* DONE Week 7 - Project update & EDA Lab II
#+attr_html: :width 400px:
[[../img/career.jpeg]]

- Project Update
- Introduction to R graphics
- Lab exercises with =MASS::mammals= and graphics

** Go to the Lyon Career Fair (Oct 1)
#+attr_html: :width 200px:
[[../img/careerfair.png]]

From the discussion in DSC 105:
#+attr_html: :width 400px:
[[../img/careerfair_whiteboard.jpg]]

- Why should you be going?

  1. Meet local companies, agencies, and organizations (like:
     LifePlus, Bad Boy Mowers, the FBI, White River Health, UAMS etc.)

  2. Learn how to ask questions, use (or develop) social skills, and
     show off your elegant wardrobe!

  3. Public relations and marketing opportunity for you and for Lyon
     (your alma-mater-to-be).

  4. Credit! (Activate the QR code)

- Which questions should we ask?

  1. Why are you here at the fair?

  2. Do you offer internships, short or long?

  3. How much do you pay (if at all)? Other perks?

  4. When will the internship be?

  5. What exactly am I going to do?

  6. Which skills will be required from me?

  7. What will I be able to learn and from whom?

  8. Whom will I be working with?

- You should work out your favorite answers to these questions before
  the fair.

- If you can, do some research beforehand on companies in the area

- You should have a 1-page resume to hand out (bring 30 copies)

- You can send me your resume for my opinion.


** Projects Update (2nd sprint: Oct 11)
#+attr_html: :width 400px:
[[../img/projects.png]]

*Projects:* Some projects were reassigned - you cannot get a 2-for-1. In
your proposal, as in the remainder of your project work, you need to
clearly demonstrate the difference between the two projects. How you
do this is down to you (I'm happy to help). Others did it before you!

*You must meet the deadline* or lose 50% (sprint review = 6% of grade).

- *Now*: Give a very short overview of your project status

- Articulate clearly:
  1) What is your main research question?
  2) What is your main methodology?
  3) What is your literature review/source strategy?
  4) How are you going to distribute the work

- Contact me or arrange a visit to discuss details of your project!


** Review (last session):

1. What is this type of plot good for, and how is it generated?
   #+attr_html: :width4600px:
   [[file:../img/plotWhiteside.png]]

   #+begin_quote
   See the relationships of all variables with one another.

   Apply =plot= to a =data.frame= (e.g. =whiteside=)
   #+end_quote

2. How is this plot generated, and what does it suggest?
   (=whiteside$Temp= is a numeric variable in the =whiteside= =data.frame)=.
   #+attr_html: :width 400px:
   [[file:../img/plot1.png]]

   #+begin_quote
   The two distinct groups of points suggest that there is a
   categorical variable (in this case =whiteside$Insul=) at work.
   #+end_quote

3. What could you do with the previous plot?
   #+begin_quote
   You could =sort= the values of =whiteside$Temp=. Now the grouping of
   the categorical variable is removed.

   #+attr_html: :width 400px:
   [[file:../img/plot2.png]]

   You could color points according to the categories. Now the
   grouping is more clearly visible.

   #+attr_html: :width 400px:
   [[file:../img/color1.png]]
   #+end_quote

4. What's the difference between a bar plot and a histogram?
   #+begin_quote
   A bar plot shows the numeric heights of its categorical variables.

   A histogram shows the counts/frequencies of its single continuous
   numeric variable. A histogram always has bins (grouped values)
   #+end_quote

5. How are colors stored in R?
   #+begin_src R :session *R* :results output :exports both
     colors()
   #+end_src

   #+RESULTS:
   #+begin_example
     [1] "white"                "aliceblue"            "antiquewhite"
     [4] "antiquewhite1"        "antiquewhite2"        "antiquewhite3"
     [7] "antiquewhite4"        "aquamarine"           "aquamarine1"
    [10] "aquamarine2"          "aquamarine3"          "aquamarine4"
    [13] "azure"                "azure1"               "azure2"
    [16] "azure3"               "azure4"               "beige"
    [19] "bisque"               "bisque1"              "bisque2"
    [22] "bisque3"              "bisque4"              "black"
    [25] "blanchedalmond"       "blue"                 "blue1"
    [28] "blue2"                "blue3"                "blue4"
    [31] "blueviolet"           "brown"                "brown1"
    [34] "brown2"               "brown3"               "brown4"
    [37] "burlywood"            "burlywood1"           "burlywood2"
    [40] "burlywood3"           "burlywood4"           "cadetblue"
    [43] "cadetblue1"           "cadetblue2"           "cadetblue3"
    [46] "cadetblue4"           "chartreuse"           "chartreuse1"
    [49] "chartreuse2"          "chartreuse3"          "chartreuse4"
    [52] "chocolate"            "chocolate1"           "chocolate2"
    [55] "chocolate3"           "chocolate4"           "coral"
    [58] "coral1"               "coral2"               "coral3"
    [61] "coral4"               "cornflowerblue"       "cornsilk"
    [64] "cornsilk1"            "cornsilk2"            "cornsilk3"
    [67] "cornsilk4"            "cyan"                 "cyan1"
    [70] "cyan2"                "cyan3"                "cyan4"
    [73] "darkblue"             "darkcyan"             "darkgoldenrod"
    [76] "darkgoldenrod1"       "darkgoldenrod2"       "darkgoldenrod3"
    [79] "darkgoldenrod4"       "darkgray"             "darkgreen"
    [82] "darkgrey"             "darkkhaki"            "darkmagenta"
    [85] "darkolivegreen"       "darkolivegreen1"      "darkolivegreen2"
    [88] "darkolivegreen3"      "darkolivegreen4"      "darkorange"
    [91] "darkorange1"          "darkorange2"          "darkorange3"
    [94] "darkorange4"          "darkorchid"           "darkorchid1"
    [97] "darkorchid2"          "darkorchid3"          "darkorchid4"
   [100] "darkred"              "darksalmon"           "darkseagreen"
   [103] "darkseagreen1"        "darkseagreen2"        "darkseagreen3"
   [106] "darkseagreen4"        "darkslateblue"        "darkslategray"
   [109] "darkslategray1"       "darkslategray2"       "darkslategray3"
   [112] "darkslategray4"       "darkslategrey"        "darkturquoise"
   [115] "darkviolet"           "deeppink"             "deeppink1"
   [118] "deeppink2"            "deeppink3"            "deeppink4"
   [121] "deepskyblue"          "deepskyblue1"         "deepskyblue2"
   [124] "deepskyblue3"         "deepskyblue4"         "dimgray"
   [127] "dimgrey"              "dodgerblue"           "dodgerblue1"
   [130] "dodgerblue2"          "dodgerblue3"          "dodgerblue4"
   [133] "firebrick"            "firebrick1"           "firebrick2"
   [136] "firebrick3"           "firebrick4"           "floralwhite"
   [139] "forestgreen"          "gainsboro"            "ghostwhite"
   [142] "gold"                 "gold1"                "gold2"
   [145] "gold3"                "gold4"                "goldenrod"
   [148] "goldenrod1"           "goldenrod2"           "goldenrod3"
   [151] "goldenrod4"           "gray"                 "gray0"
   [154] "gray1"                "gray2"                "gray3"
   [157] "gray4"                "gray5"                "gray6"
   [160] "gray7"                "gray8"                "gray9"
   [163] "gray10"               "gray11"               "gray12"
   [166] "gray13"               "gray14"               "gray15"
   [169] "gray16"               "gray17"               "gray18"
   [172] "gray19"               "gray20"               "gray21"
   [175] "gray22"               "gray23"               "gray24"
   [178] "gray25"               "gray26"               "gray27"
   [181] "gray28"               "gray29"               "gray30"
   [184] "gray31"               "gray32"               "gray33"
   [187] "gray34"               "gray35"               "gray36"
   [190] "gray37"               "gray38"               "gray39"
   [193] "gray40"               "gray41"               "gray42"
   [196] "gray43"               "gray44"               "gray45"
   [199] "gray46"               "gray47"               "gray48"
   [202] "gray49"               "gray50"               "gray51"
   [205] "gray52"               "gray53"               "gray54"
   [208] "gray55"               "gray56"               "gray57"
   [211] "gray58"               "gray59"               "gray60"
   [214] "gray61"               "gray62"               "gray63"
   [217] "gray64"               "gray65"               "gray66"
   [220] "gray67"               "gray68"               "gray69"
   [223] "gray70"               "gray71"               "gray72"
   [226] "gray73"               "gray74"               "gray75"
   [229] "gray76"               "gray77"               "gray78"
   [232] "gray79"               "gray80"               "gray81"
   [235] "gray82"               "gray83"               "gray84"
   [238] "gray85"               "gray86"               "gray87"
   [241] "gray88"               "gray89"               "gray90"
   [244] "gray91"               "gray92"               "gray93"
   [247] "gray94"               "gray95"               "gray96"
   [250] "gray97"               "gray98"               "gray99"
   [253] "gray100"              "green"                "green1"
   [256] "green2"               "green3"               "green4"
   [259] "greenyellow"          "grey"                 "grey0"
   [262] "grey1"                "grey2"                "grey3"
   [265] "grey4"                "grey5"                "grey6"
   [268] "grey7"                "grey8"                "grey9"
   [271] "grey10"               "grey11"               "grey12"
   [274] "grey13"               "grey14"               "grey15"
   [277] "grey16"               "grey17"               "grey18"
   [280] "grey19"               "grey20"               "grey21"
   [283] "grey22"               "grey23"               "grey24"
   [286] "grey25"               "grey26"               "grey27"
   [289] "grey28"               "grey29"               "grey30"
   [292] "grey31"               "grey32"               "grey33"
   [295] "grey34"               "grey35"               "grey36"
   [298] "grey37"               "grey38"               "grey39"
   [301] "grey40"               "grey41"               "grey42"
   [304] "grey43"               "grey44"               "grey45"
   [307] "grey46"               "grey47"               "grey48"
   [310] "grey49"               "grey50"               "grey51"
   [313] "grey52"               "grey53"               "grey54"
   [316] "grey55"               "grey56"               "grey57"
   [319] "grey58"               "grey59"               "grey60"
   [322] "grey61"               "grey62"               "grey63"
   [325] "grey64"               "grey65"               "grey66"
   [328] "grey67"               "grey68"               "grey69"
   [331] "grey70"               "grey71"               "grey72"
   [334] "grey73"               "grey74"               "grey75"
   [337] "grey76"               "grey77"               "grey78"
   [340] "grey79"               "grey80"               "grey81"
   [343] "grey82"               "grey83"               "grey84"
   [346] "grey85"               "grey86"               "grey87"
   [349] "grey88"               "grey89"               "grey90"
   [352] "grey91"               "grey92"               "grey93"
   [355] "grey94"               "grey95"               "grey96"
   [358] "grey97"               "grey98"               "grey99"
   [361] "grey100"              "honeydew"             "honeydew1"
   [364] "honeydew2"            "honeydew3"            "honeydew4"
   [367] "hotpink"              "hotpink1"             "hotpink2"
   [370] "hotpink3"             "hotpink4"             "indianred"
   [373] "indianred1"           "indianred2"           "indianred3"
   [376] "indianred4"           "ivory"                "ivory1"
   [379] "ivory2"               "ivory3"               "ivory4"
   [382] "khaki"                "khaki1"               "khaki2"
   [385] "khaki3"               "khaki4"               "lavender"
   [388] "lavenderblush"        "lavenderblush1"       "lavenderblush2"
   [391] "lavenderblush3"       "lavenderblush4"       "lawngreen"
   [394] "lemonchiffon"         "lemonchiffon1"        "lemonchiffon2"
   [397] "lemonchiffon3"        "lemonchiffon4"        "lightblue"
   [400] "lightblue1"           "lightblue2"           "lightblue3"
   [403] "lightblue4"           "lightcoral"           "lightcyan"
   [406] "lightcyan1"           "lightcyan2"           "lightcyan3"
   [409] "lightcyan4"           "lightgoldenrod"       "lightgoldenrod1"
   [412] "lightgoldenrod2"      "lightgoldenrod3"      "lightgoldenrod4"
   [415] "lightgoldenrodyellow" "lightgray"            "lightgreen"
   [418] "lightgrey"            "lightpink"            "lightpink1"
   [421] "lightpink2"           "lightpink3"           "lightpink4"
   [424] "lightsalmon"          "lightsalmon1"         "lightsalmon2"
   [427] "lightsalmon3"         "lightsalmon4"         "lightseagreen"
   [430] "lightskyblue"         "lightskyblue1"        "lightskyblue2"
   [433] "lightskyblue3"        "lightskyblue4"        "lightslateblue"
   [436] "lightslategray"       "lightslategrey"       "lightsteelblue"
   [439] "lightsteelblue1"      "lightsteelblue2"      "lightsteelblue3"
   [442] "lightsteelblue4"      "lightyellow"          "lightyellow1"
   [445] "lightyellow2"         "lightyellow3"         "lightyellow4"
   [448] "limegreen"            "linen"                "magenta"
   [451] "magenta1"             "magenta2"             "magenta3"
   [454] "magenta4"             "maroon"               "maroon1"
   [457] "maroon2"              "maroon3"              "maroon4"
   [460] "mediumaquamarine"     "mediumblue"           "mediumorchid"
   [463] "mediumorchid1"        "mediumorchid2"        "mediumorchid3"
   [466] "mediumorchid4"        "mediumpurple"         "mediumpurple1"
   [469] "mediumpurple2"        "mediumpurple3"        "mediumpurple4"
   [472] "mediumseagreen"       "mediumslateblue"      "mediumspringgreen"
   [475] "mediumturquoise"      "mediumvioletred"      "midnightblue"
   [478] "mintcream"            "mistyrose"            "mistyrose1"
   [481] "mistyrose2"           "mistyrose3"           "mistyrose4"
   [484] "moccasin"             "navajowhite"          "navajowhite1"
   [487] "navajowhite2"         "navajowhite3"         "navajowhite4"
   [490] "navy"                 "navyblue"             "oldlace"
   [493] "olivedrab"            "olivedrab1"           "olivedrab2"
   [496] "olivedrab3"           "olivedrab4"           "orange"
   [499] "orange1"              "orange2"              "orange3"
   [502] "orange4"              "orangered"            "orangered1"
   [505] "orangered2"           "orangered3"           "orangered4"
   [508] "orchid"               "orchid1"              "orchid2"
   [511] "orchid3"              "orchid4"              "palegoldenrod"
   [514] "palegreen"            "palegreen1"           "palegreen2"
   [517] "palegreen3"           "palegreen4"           "paleturquoise"
   [520] "paleturquoise1"       "paleturquoise2"       "paleturquoise3"
   [523] "paleturquoise4"       "palevioletred"        "palevioletred1"
   [526] "palevioletred2"       "palevioletred3"       "palevioletred4"
   [529] "papayawhip"           "peachpuff"            "peachpuff1"
   [532] "peachpuff2"           "peachpuff3"           "peachpuff4"
   [535] "peru"                 "pink"                 "pink1"
   [538] "pink2"                "pink3"                "pink4"
   [541] "plum"                 "plum1"                "plum2"
   [544] "plum3"                "plum4"                "powderblue"
   [547] "purple"               "purple1"              "purple2"
   [550] "purple3"              "purple4"              "red"
   [553] "red1"                 "red2"                 "red3"
   [556] "red4"                 "rosybrown"            "rosybrown1"
   [559] "rosybrown2"           "rosybrown3"           "rosybrown4"
   [562] "royalblue"            "royalblue1"           "royalblue2"
   [565] "royalblue3"           "royalblue4"           "saddlebrown"
   [568] "salmon"               "salmon1"              "salmon2"
   [571] "salmon3"              "salmon4"              "sandybrown"
   [574] "seagreen"             "seagreen1"            "seagreen2"
   [577] "seagreen3"            "seagreen4"            "seashell"
   [580] "seashell1"            "seashell2"            "seashell3"
   [583] "seashell4"            "sienna"               "sienna1"
   [586] "sienna2"              "sienna3"              "sienna4"
   [589] "skyblue"              "skyblue1"             "skyblue2"
   [592] "skyblue3"             "skyblue4"             "slateblue"
   [595] "slateblue1"           "slateblue2"           "slateblue3"
   [598] "slateblue4"           "slategray"            "slategray1"
   [601] "slategray2"           "slategray3"           "slategray4"
   [604] "slategrey"            "snow"                 "snow1"
   [607] "snow2"                "snow3"                "snow4"
   [610] "springgreen"          "springgreen1"         "springgreen2"
   [613] "springgreen3"         "springgreen4"         "steelblue"
   [616] "steelblue1"           "steelblue2"           "steelblue3"
   [619] "steelblue4"           "tan"                  "tan1"
   [622] "tan2"                 "tan3"                 "tan4"
   [625] "thistle"              "thistle1"             "thistle2"
   [628] "thistle3"             "thistle4"             "tomato"
   [631] "tomato1"              "tomato2"              "tomato3"
   [634] "tomato4"              "turquoise"            "turquoise1"
   [637] "turquoise2"           "turquoise3"           "turquoise4"
   [640] "violet"               "violetred"            "violetred1"
   [643] "violetred2"           "violetred3"           "violetred4"
   [646] "wheat"                "wheat1"               "wheat2"
   [649] "wheat3"               "wheat4"               "whitesmoke"
   [652] "yellow"               "yellow1"              "yellow2"
   [655] "yellow3"              "yellow4"              "yellowgreen"
   #+end_example

6. What does this code do?
   #+begin_src R :session *R* :results output graphics file :file ../img/custom2.png
     library(MASS)  # load MASS package

     plot(x = whiteside$Temp, # plot gas consumption vs. outside temperature
          y = whiteside$Gas,
          pch = c(6,16)[whiteside$Insul]) # pick point character by factor
     legend(x = "topright",  # location of legend box
            legend=c("Insul = Before", "Insul = After"), # legend symbols
            pch = c(6,16))  # which point characters to use in the leged
   #+end_src

   #+RESULTS:
   [[file:../img/custom2.png]]

   #+begin_quote
   - Plot gas consumption as a function of outside temperature.
   - Distinguish points depending on before/after insulation.
   - Add a legend that shows the different point symbols.
   #+end_quote

7. How can point characteristics be exchanged for colors?
   #+begin_src R :session *R* :results output graphics file :file ../img/custom3.png
     plot(x = whiteside$Temp,
          y = whiteside$Gas,
          col = c(6,16)[whiteside$Insul],
          pch=16)
     legend(x = "topright",
            legend=c("Insul = Before", "Insul = After"),
            col = c(6,16), pch=16)
   #+end_src

   #+RESULTS:
   [[file:../img/custom3.png]]


** Set theory: =MASS::mammals= & =robustbase::Animals2=
#+attr_html: :width 600px:
[[../img/mammals.jpg]]

- *Some of you have not uploaded their EDA practice file to Canvas.*

- This is optional but shows your active participation in class.

- Get the practice file here: [[https://tinyurl.com/eda-lab-org][tinyurl.com/eda-lab-org]]:
  #+begin_src bash :results output
    wget -O eda-lab.org tinyurl.com/eda-lab-org
  #+end_src

  #+RESULTS:

- Complete the practice file and upload it to Canvas.

* DONE Week 8 - Python =matplotlib= & =ggplot2= plotting
#+attr_html: :width 400px:
#+caption: Henri Matisse, The Snail (French: L'escargot) 1953
[[../img/3_matisse.png]]

- [X] Finish =ggplot2= examples
- [X] How to plot with Python in Emacs + Org-mode
- [ ] How to plot ~mtcars~ with Python in Emacs + Org-mode
- [ ] Graphics lecture & code along

** Base R EDA and =ggplot2= popquiz

1. Plot f(x) = 5x-3  for x in [0,10].
   #+begin_src R :file  ../img/linear.png :session *R* :results file graphics output
     x <- c(0,10)
     plot(x,y=5*x-3)
   #+end_src

   #+RESULTS:
   [[file:../img/linear.png]]

   Another possibility:
   #+begin_src R :file  ../img/linear2.png :session *R* :results file graphics output
     x <- c(0,1)
     plot(1)
     abline(-3,5)  # intercept + slope
   #+end_src

   #+RESULTS:
   [[file:../img/linear2.png]]

2. Plot f(x) = (1-x)^2 for x in [0,10].
   #+begin_src R :file  ../img/nonlinear.png :session *R* :results file graphics output
     ##x <- c(0,1,2,3,4,5,6,7,8,9,10)
     x <- seq(0,10,by=0.1)  # more granular
     plot(x,y=(1-x)^2, type="l") # as a line instead of scatterplot
   #+end_src

   #+RESULTS:
   [[file:../img/nonlinear.png]]

   To create a sequence of equally spaced values, use =seq=:
   #+begin_src R
     seq(0,10,by=0.1)
   #+end_src

   #+RESULTS:
   :   [1]  0.0  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1.0  1.1  1.2  1.3  1.4  1.5  1.6
   :  [18]  1.7  1.8  1.9  2.0  2.1  2.2  2.3  2.4  2.5  2.6  2.7  2.8  2.9  3.0  3.1  3.2  3.3
   :  [35]  3.4  3.5  3.6  3.7  3.8  3.9  4.0  4.1  4.2  4.3  4.4  4.5  4.6  4.7  4.8  4.9  5.0
   :  [52]  5.1  5.2  5.3  5.4  5.5  5.6  5.7  5.8  5.9  6.0  6.1  6.2  6.3  6.4  6.5  6.6  6.7
   :  [69]  6.8  6.9  7.0  7.1  7.2  7.3  7.4  7.5  7.6  7.7  7.8  7.9  8.0  8.1  8.2  8.3  8.4
   :  [86]  8.5  8.6  8.7  8.8  8.9  9.0  9.1  9.2  9.3  9.4  9.5  9.6  9.7  9.8  9.9 10.0

3. In base R, plot the measurements before and after insulation in the
   =whiteside= data set (distinguished by the values of =Insul = "Before"=
   and =Insul = "After"=).
   #+begin_src R :file  ../img/insulplot.png :session *R* :results file graphics output
     library(MASS)
     data(whiteside)
     plot(x=whiteside$Insul)
   #+end_src

   #+RESULTS:
   [[file:../img/insulplot.png]]

4. Make a pair plot of the variables of the built-in =iris= dataset.
   #+begin_src R :file  ../img/iris.png :session *R* :results file graphics output
     plot(iris)
   #+end_src

   #+RESULTS:
   [[file:../img/iris.png]]

   Information about =iris=:
   #+begin_src R :session *R* :results output :exports both :noweb yes
     str(iris)
   #+end_src

   #+RESULTS:
   : 'data.frame':      150 obs. of  5 variables:
   :  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
   :  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
   :  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
   :  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
   :  $ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...

5. The built-in data set =AirPassengers= is a time series. It contains
   the monthly totals of international airline passengers from 1949
   to 1960. In base R, make a line plot of the time series data, and
   title it "Monthly number of int. air passengers 1949-1960".
   #+begin_src R :file  ../img/AirPassengers.png :session *R* :results file graphics output
     plot(AirPassengers)
     ## main="Monthly no. of int. passengers 1949-1960")
     title("Monthly no. of int. passengers 1949-1960")
   #+end_src

   #+RESULTS:
   [[file:../img/AirPassengers.png]]

6. In base R, make a histogram of the =AirPassengers= time series, and
   change the default y-axis label to "Count of Int. air passengers".
   #+begin_src R :file  ../img/AirPassengers2.png :session *R* :results file graphics output
     hist(AirPassengers,
          ylab="Count of Int. air passengers")
   #+end_src

   #+RESULTS:
   [[file:../img/AirPassengers2.png]]

7. Plot the statistical =summary= values including the =mean= for the
   =AirPassengers= dataset.
   #+begin_src R :file  ../img/airbox.png :session *R* :results file graphics output
     boxplot(AirPassengers)
     abline(h=mean(AirPassengers),col="red",lwd=2)
   #+end_src

   #+RESULTS:
   [[file:../img/airbox.png]]

   #+begin_src R
     AirPassengers |> summary()
   #+end_src

   #+RESULTS:
   :    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
   :   104.0   180.0   265.5   280.3   360.5   622.0

8. Using =ggplot2=, make a histogram of the time series data set
   =AirPassengers= and label the y-axis "Count of int. air passengers")

   #+begin_src R
     str(AirPassengers)
     is.numeric(AirPassengers)
   #+end_src

   #+RESULTS:
   :  Time-Series [1:144] from 1949 to 1961: 112 118 132 129 121 135 148 148 136 119 ...
   : [1] TRUE

   Convert to data.frame:
   #+begin_src R :session *R* :results output :exports both :noweb yes
     df <- data.frame(Passengers=as.numeric(AirPassengers))
     str(df)
   #+end_src

   #+RESULTS:
   : 'data.frame':      144 obs. of  1 variable:
   :  $ Passengers: num  112 118 132 129 121 135 148 148 136 119 ...

   #+begin_src R :file  ../img/airHistggplot2.png :session *R* :results file graphics output
     library(ggplot2)
     ggplot(df, aes(x=Passengers)) +  # dataset + aesthetics
       geom_histogram(binwidth=30,
                      fill='lightblue',
                      color='black') +
       labs(y="Count of Int. Air Passengers")
   #+end_src

   #+RESULTS:
   [[file:../img/airHistggplot2.png]]

9. Using =ggplot2=, plot f(x) = 5x-3  for x in [0,10].

   Create dataframe:
   #+begin_src R
     x <- c(0,10)
     y <- 5 * x - 3  # vectorized
     df_lin <- data.frame(x,y)
     str(df_lin)
   #+end_src

   #+RESULTS:
   : 'data.frame':      2 obs. of  2 variables:
   :  $ x: num  0 10
   :  $ y: num  -3 47

   #+begin_src R :file  ../img/linGG.png :session *R* :results output graphics file
     library(ggplot2)
     ggplot(df_lin, aes(x,y)) +
       geom_line()
   #+end_src

   #+RESULTS:
   [[file:../img/linGG.png]]

   - To see that =ggplot2= was actually loaded:
     #+begin_src R
       search()
     #+end_src

     #+RESULTS:
     :  [1] ".GlobalEnv"            "package:MASS"          "package:scatterplot3d"
     :  [4] "package:dplyr"         "package:data.table"    "package:ggplot2"
     :  [7] "ESSR"                  "package:stats"         "package:graphics"
     : [10] "package:grDevices"     "package:utils"         "package:datasets"
     : [13] "package:methods"       "Autoloads"             "package:base"

10. Using =ggplot2=, plot f(x) = (1-x)^2 for x in [0,10].

    Create dataframe from x,y vectors:
    #+begin_src R
      x1 <- seq(0,10,0.1)
      y1 <- (1-x1)^2
      df_nonlin <- data.frame(x1,y1)
      str(df_nonlin)
    #+end_src

    #+RESULTS:
    : 'data.frame':     101 obs. of  2 variables:
    :  $ x1: num  0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 ...
    :  $ y1: num  1 0.81 0.64 0.49 0.36 0.25 0.16 0.09 0.04 0.01 ...

    #+begin_src R :file  ../img/nonlinGG.png :session *R* :results output graphics file
      library(ggplot2)
      ggplot(df_nonlin, aes(x1,y1)) +
        geom_line()
    #+end_src

    #+RESULTS:
    [[file:../img/nonlinGG.png]]


** Project update - first podcasts & literature reviews
#+attr_html: :width 400px:
[[../img/notebooklm_example2.png]]

Your deliverables for this 2nd sprint are:
1. [ ] *Find* at least one *scholarly* article relevant to your project.
2. [ ] *Build* a litmap for the article with litmaps.com.
3. [ ] Make a screenshot of the litmap.
4. [ ] Convert the screenshot to a PDF (e.g. using Google Docs).
5. [ ] *Upload* the LitMap screenshot & other sources to NotebookLM.
6. [ ] *Improve* your proposal by adding relevant references.
7. [ ] *Upload* your (improved) project proposal (as text) to NotebookLM.
8. [ ] *Generate* a podcast based on your collected sources.
9. [ ] *Share* your Google NotebookLM project with me.
10. [ ] *Submit* the link to your Google NotebookLM project in Canvas.
11. [ ] *Upload* your podcast to your shared drive.
12. [ ] *Share* the link to the podcast on the Chat for this class.

Tips:
- [ ] *Meet* the deadline or earn a 50% penalty.
- [ ] *Start* this assignment *early*, don't leave it to the last minute.
- [ ] Give yourself *time* to *evaluate* & *discuss* the NotebookLM output.
- [ ] *Share* your comments and thoughts in a *thread* in Canvas.

Example: *"Arkansas Signature Insights"*
- [X] Shared notebook with me (it shows up in my dashboard)
- [X] Uploaded podcast in a GDrive
- [ ] No link submitted in Canvas (yet)
- [ ] No references found or added (blank Litmap PDF

Q&A:
- [X] Is it OK that the podcast is more about the sources?
- [X] Should we add more references without commenting?
- [X] Should we add our first proposal to the notebook?
- [X] Do we each have to upload a submission?


** Data visualization with =matplotlib= in Emacs

- Create a new template for regular and for graphics plots, via =C-h v
  org-structure-template-alist=:

  1) Python block (assumes that your Python program is =python3=):
     #+begin_example
     Key: p
     Template: src python :results output :session *Python* :python python3
     #+end_example

     #+begin_src python :session *Python* :python python3 :results output :exports both :noweb yes
       print("hello world")
     #+end_src

     #+RESULTS:
     : hello world

  2) Python graphics block (saves file to =plot.png= by default):
     #+begin_example
     Key: pg
     Template: src python :file plot.png :results file graphics output :session *Python* :python python3
     #+end_example

  3) In future files, add this to the top of your Org file:
     #+begin_example
     #+PROPERTY: header-args:python :python python3 :session *Python* :results output
     #+end_example

- Make a sample plot: Use the example from the DataCamp lesson.

  1) Load the =pyplot= submodule from the =matplotlib= graphics library:

     #+begin_src python :session *Python* :python python3 :results none :exports both :noweb yes
       import matplotlib.pyplot as plt
     #+end_src

  2) Create a vector from (0,0) to (10,10) to plot:

     #+begin_src python :session *Python* :python python3 :results output :exports both :noweb yes
       x = range(10)
       print(x)
       print(type(x))
       [print(i) for i in x]
     #+end_src

     #+RESULTS:
     #+begin_example
     range(0, 10)
     <class 'range'>
     0
     1
     2
     3
     4
     5
     6
     7
     8
     9
     #+end_example

     #+begin_src python :file  ../img/xplot.png :results file graphics output :session *Python* :python python3
       plt.clf()  # clear graphics canvas

       plt.plot(x)  # draw the plot

       plt.savefig("xplot.png") # save plot to file. On console: plt.show()
     #+end_src

     #+RESULTS:
     [[file:../img/xplot.png]]

     #+begin_src python :results output :session *Python* :python python3 :exports both
       x = range(10) # define vector (range object)
       print(type(x))  # Python object class
       print(x)  # print vector
       [print(_) for _ in range(10)] # print vector as a list (comprehension)
     #+end_src

     #+RESULTS:
     #+begin_example
     <class 'range'>
     range(0, 10)
     0
     1
     2
     3
     4
     5
     6
     7
     8
     9
     #+end_example

  3) Plot vector:
     #+begin_src python :file  ../img/vector.png :results file graphics output :session *Python* :python python3 :exports both
       plt.clf()  # clear graphics cache
       plt.plot(x)
       plt.savefig("vector.png")
     #+end_src

     #+RESULTS:
     [[file:../img/vector.png]]

- How about rebuilding the =mtcars= plot that we always do?

  1) [[https://gist.githubusercontent.com/seankross/a412dfbd88b3db70b74b/raw/5f23f993cd87c283ce766e7ac6b329ee7cc2e1d1/mtcars.csv][Get mtcars from GitHub]] as a CSV file: [[https://tinyurl.com/mtcars-csv-data][tinyurl.com/mtcars-csv-data]]
     and check if there's a header.
     #+begin_src bash :results output :exports both
       wget -O mtcars.csv tinyurl.com/mtcars-csv-data
       ls -l mtcars.csv
       head -n 2 mtcars.csv
     #+end_src

     #+RESULTS:
     : -rw-rw-r-- 1 aletheia aletheia 1700 Nov  4 09:06 mtcars.csv
     : model,mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
     : Mazda RX4,21,6,160,110,3.9,2.62,16.46,0,1,4,4

  2) Load the =pandas= data frame library
     #+begin_src python :results none :session *Python* :python python3 :exports both
       import pandas as pd
     #+end_src

  3) Import CSV into dataframe
     #+begin_src python :results output :session *Python* :python python3 :exports both
       mtcars = pd.read_csv('mtcars.csv')
       print(mtcars.head())
     #+end_src

     #+RESULTS:
     :                model   mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  carb
     : 0          Mazda RX4  21.0    6  160.0  110  3.90  2.620  16.46   0   1     4     4
     : 1      Mazda RX4 Wag  21.0    6  160.0  110  3.90  2.875  17.02   0   1     4     4
     : 2         Datsun 710  22.8    4  108.0   93  3.85  2.320  18.61   1   1     4     1
     : 3     Hornet 4 Drive  21.4    6  258.0  110  3.08  3.215  19.44   1   0     3     1
     : 4  Hornet Sportabout  18.7    8  360.0  175  3.15  3.440  17.02   0   0     3     2

  4) Plot miles-per-gallon vs weight:
     #+begin_src python :file  ../img/mtcars.png :results file graphics output :session *Python* :python python3 :exports both
       import matplotlib.pyplot as plt
       plt.clf()
       plt.scatter(mtcars['wt'], mtcars['mpg'])
       plt.xlabel('Weight (1000 lbs)')
       plt.ylabel('Miles per Gallon (mpg)')
       plt.title('MPG vs. Weight')
       plt.savefig("mtcars.png")
     #+end_src

     #+RESULTS:
     [[file:../img/mtcars.png]]

- How does this compare to the ~mtcars~ plot in R that you already know?
  Try to reproduce the R plot from memory so that it looks like this.

- Tip: build the plot up step by step:
  1) Basic plot (x,y)
  2) Alter the points and the color
  3) Add title and labels
  4) Put 1-3 on one page

#+begin_src R :session *R* :results output :exports both :noweb yes
  str(mtcars)
#+end_src

#+RESULTS:
#+begin_example
'data.frame':   32 obs. of  11 variables:
 $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
 $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...
 $ disp: num  160 160 108 258 360 ...
 $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...
 $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
 $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
 $ qsec: num  16.5 17 18.6 19.4 17 ...
 $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
 $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
 $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
 $ carb: num  4 4 1 1 2 1 4 2 2 4 ...
#+end_example

Now the plot
#+begin_src R :file  ../img/mtcars2.png :session *R* :results output graphics file
  data(mtcars)
  par(mfrow=c(3,1),pty='s')
  y <- mtcars$mpg
  x <- mtcars$wt
  plot(x,y)
  plot(x,y, pch=16, cex=1.5, col="steelblue")
  plot(x,y, pch=16, cex=1.5, col="steelblue",
       main="MPG vs. Weight",
       xlab="Weight (1000 lbs.)",
       ylab="Miles per Gallon (mpg)")
#+end_src

#+RESULTS:
[[file:../img/mtcars2.png]]


- Would you know how to put these three improvements into one plot?

- Solution:
  #+begin_src R :file  ../img/mtcarsR.png :session *R* :results file graphics output :exports both
    data(mtcars)
    par(mfrow=c(3,1)) # add pty='s' to preserve the scale of the original plots
    plot(mtcars$wt,mtcars$mpg) # basic plot
    plot(mtcars$wt,mtcars$mpg, pch=16, cex=1.5, col="steelblue")  # points
    plot(mtcars$wt,mtcars$mpg,
         pch=16,
         cex=1.5,
         col="steelblue",  # points
         main="MPG vs. Weight",
         xlab="Weight (1000 lbs)",
         ylab="Miles per Gallon (mpg)") # title, labels
  #+end_src

  #+RESULTS:
  [[file:../img/mtcarsR.png]]

- Linux/Infrastructure question: if you check your current directory,
  how about all those PNG files. Could you delete them (and how)?
  #+begin_src bash :results output :exports both
    pwd
    ls *.png
  #+end_src

  #+RESULTS:
  #+begin_example
  /home/aletheia/GitHub/dviz/org
  3d_scatterplot.png
  abline.png
  airbox.png
  airHistggplot2.png
  AirPassengers2.png
  AirPassengers.png
  axes2.png
  axes3.png
  axes4.png
  axes.png
  boxplot.png
  box.png
  cex.png
  colorPlot.png
  factorBox.png
  frame.png
  insulplot.png
  iris.png
  linear2.png
  linear.png
  lineColor.png
  lineThick.png
  lineTrans.png
  lineType.png
  linGG.png
  mosaic2.png
  mosaic.png
  mtcars2.png
  mtcars.png
  mtcarsR.png
  NileBox.png
  nile.png
  Nile.png
  nonlinear.png
  nonlinGG.png
  overplot2.png
  overplot.png
  pairplot.png
  par.png
  plot.png
  p.png
  seattle2.png
  seattle3.png
  seattle4.png
  seattle5.png
  seattle6.png
  shapePlot2.png
  sizePlot.png
  subplot.png
  subplots.png
  suppBox.png
  tg.png
  transPlot.png
  ts3.png
  ts.png
  vector.png
  xplot.png
  #+end_example

- To delete them in one fell swoop:
  #+begin_src bash :results output
    ls
  #+end_src

  #+RESULTS:
  #+begin_example
  1_overview.org
  2_trendline.org
  3_base_R_ggplot2_popquiz.org
  3d_scatterplot.png
  3_eda_lab.org
  3_eda.org
  3_eda_practice.org
  4_graphics.org
  4_graphics_practice.org
  5_ggplot2_review.org
  6_plot_codealong.org
  6_plot.org
  abline.png
  airbox.png
  airHistggplot2.png
  AirPassengers2.png
  AirPassengers.png
  axes2.png
  axes3.png
  axes4.png
  axes.png
  boxplot.png
  box.png
  cex.png
  colorPlot.png
  eda-lab.org
  eda_practice_copy.org
  factorBox.png
  frame.png
  ggplot2.org
  graphics_practice.org
  insulplot.png
  iris.png
  linear2.png
  linear.png
  lineColor.png
  lineThick.png
  lineTrans.png
  lineType.png
  linGG.png
  mosaic2.png
  mosaic.png
  mtcars2.png
  mtcars.csv
  mtcars.png
  mtcarsR.png
  NileBox.png
  nile.png
  Nile.png
  nonlinear.png
  nonlinGG.png
  notes.org
  overplot2.png
  overplot.png
  pairplot.png
  par.png
  plot.png
  #p.png#
  p.png
  practice
  projects
  pythonTest.org
  seattle2.png
  seattle3.png
  seattle4.png
  seattle5.png
  seattle6.png
  shapePlot2.png
  sizePlot.png
  subplot.png
  subplots.png
  suppBox.png
  syllabus.org
  syllabus_pdf.org
  testCustom.org
  test.org
  tg.png
  transPlot.png
  ts3.png
  ts.png
  vector.png
  wdtest.org
  weather.csv
  xplot.png
  #+end_example

* DONE Week 9 - Alternative R graphics packages / Python plotting with =subplots=
#+attr_html: :width 600px:
[[../img/leonardo.jpg]]

/Image: Leonardo Da Vinci, The Last Supper/

- [X] Finish =matplotlib= introduction (=mtcars=).
- [X] Review plotting with =matplotlib.pyplot.subplot=.
- [X] Alternative R graphics packages.
- [ ] The Grammar of Graphics (gg).
- [ ] Working with R and Python in parallel.

** Review: Plotting with =matplotlib.pyplot=

1. Why are we using the =pyplot= submodule?
   #+begin_quote
   Answer: check the online documentation for [[https://matplotlib.org/stable/api/pyplot_summary.html][matplotlib.pyplot]]:
   "=pyplot= is mainly intended for interactive plots and simple cases of
   [...] plot generation."
   #+end_quote

2. Why doesn't the function =print= have a dot operator but =plot= does?
   #+begin_src python :results output :session *Python* :python python3 :exports both
     print("I don't need no dot.")

     import matplotlib.pyplot as plt
     plt.plot()  # I do need a dot
   #+end_src

   #+RESULTS:
   : I don't need no dot.

3. What does the command with =subplots= below *mean*, and what does it *do*?
   #+begin_src python :file  ../img/subplot.png :results file graphics output :session *Python* :python python3 :exports both
     fig, ax = plt.subplots()
     plt.savefig("subplot.png")
   #+end_src

   #+RESULTS:
   [[file:../img/subplot.png]]

   #+begin_quote
   The command creates a frame in the form of an object with a figure
   and axes. Since no data were specified, only the frame was created.
   #+end_quote

4. How can we get data, for example in CSV format, into Python?
   #+begin_quote
   You can get the data from DataCamp (download from dashboard).

   We can import CSV data into a =DataFrame= format using the =pandas=
   function =read_csv=, which works very similar to R's =read.csv=.
   #+end_quote

   #+begin_src python :results output :session *Python* :python python3 :exports both
     import pandas as pd
     df = pd.read_csv("../data/seattle_weather.csv")
     print(df.info()) # similar to Rs `str`
     #print(df.head())  # similar to Rs `head`
   #+end_src

   #+RESULTS:
   #+begin_example
   <class 'pandas.core.frame.DataFrame'>
   RangeIndex: 25551 entries, 0 to 25550
   Data columns (total 5 columns):
    #   Column  Non-Null Count  Dtype
   ---  ------  --------------  -----
    0   DATE    25551 non-null  object
    1   PRCP    25548 non-null  float64
    2   TMAX    25551 non-null  int64
    3   TMIN    25551 non-null  int64
    4   RAIN    25548 non-null  object
   dtypes: float64(1), int64(2), object(2)
   memory usage: 998.2+ KB
   None
   #+end_example

5. How do we add the data to the plot, and how do we plot?
   #+begin_src python :python python3 :session *Python* :results output
     # extract 12 temperature column values (not averages)
     data = {
         'MONTH': ["Jan","Feb","Mar","Apr","May","Jun",
                   "Jul","Aug","Sep","Oct","Nov","Dec"],
         'TEMP' : [42.1,43.4,46.6,50.5,56.0,61.0,
                   65.9,66.5,61.6,53.3,46.2,41.1]
     }
     df = pd.DataFrame(data)
     print(df)
   #+end_src

   #+RESULTS:
   #+begin_example
      MONTH  TEMP
   0    Jan  42.1
   1    Feb  43.4
   2    Mar  46.6
   3    Apr  50.5
   4    May  56.0
   5    Jun  61.0
   6    Jul  65.9
   7    Aug  66.5
   8    Sep  61.6
   9    Oct  53.3
   10   Nov  46.2
   11   Dec  41.1
   #+end_example

   #+begin_src python :file  ../img/axes.png :results file graphics output :session *Python* :python python3 :exports both
     plt.clf()  # clearing the graphics canvas
     fig,ax=plt.subplots()  # setting up a graphics frame
     ax.plot(df["MONTH"],df["TEMP"])  # adding the data
     plt.savefig(" ../img/axes.png")  # writing the file
   #+end_src

   #+RESULTS:
   [[file:../img/axes.png]]


** WE MEET ON FRIDAY BUT THERE WILL BE NO CLASS ON MONDAY
#+attr_html: :width 600px:
[[../img/zwei_maenner.jpeg]]

You will get a practice file instead (with simple Python plotting
exercises) & you can also use the time to work on your projects.

I should have finished checking your literature reviews by end of the
week, and I will give you feedback as usual (prob at NotebookLM).

[[https://tinyurl.com/graphics-practice-org][Practice file in GitHub]] (raw Org-mode for import into Emacs):
tinyurl.com/graphics-practice-org - don't forget your R skills!

Next week: Python plotting lab with practice file.


** Graphics: Alternative Packages
#+attr_html: :width 700px:
[[../img/execution_of_robespierre.jpg]]

/Image: 1794 Infographic - Execution of the Tyrant Robespierre/: "Long
live the National Convention, which through its energy and vigilance
has delivered the Republic from its tyrants."

** Review: Plotting with =subplots=

/Tip: Don't wait with the DataCamp lessons to the last moment./ To learn
anything from them, you must work through the examples on your own. In
this way you'll learn Python and visualization with Python, for free!

1. How do you add data to =subplots= axes and plot the data?
   #+begin_src python :file  ../img/axes2.png :results file graphics output :session *Python* :python python3 :exports both
     import matplotlib.pyplot as plt
     import random
     data = [random.random() for _ in range(50)] # list comprehension
     plt.clf()
     fig, ax = plt.subplots()
     ax.plot(data)
     plt.savefig(" ../img/axes2.png")
   #+end_src

   #+RESULTS:
   [[file:../img/axes2.png]]

2. How do you customize a default =plot= with point characters, line
   type, and color?
   #+begin_src python :file  ../img/axes2a.png :results file graphics output :session *Python* :python python3 :exports both
     plt.clf()
     fig, ax = plt.subplots()
     ax.plot(data,
             marker='v',   # R: pch
             linestyle='--', # R: lty
             color='r') # R: col
     plt.savefig(" ../img/axes2a.png")
   #+end_src

   #+RESULTS:
   [[file:../img/axes2a.png]]

3. How do you customize a default =plot= with title and axis labels?
   #+begin_src python :file  ../img/axes3.png :results file graphics output :session *Python* :python python3 :exports both
     # setup
     plt.clf()
     fig, ax = plt.subplots()
     # add data and point customization
     ax.plot(data,marker='s')
     # add title and axis labels using the state-based interface
     plt.xlabel("Random numbers")
     plt.ylabel("Random values")
     plt.title("Random number plot (state-based customization)")
     # save plot
     plt.savefig(" ../img/axes3.png")
   #+end_src

   #+RESULTS:
   [[file:../img/axes3.png]]

   #+begin_src python :file  ../img/axes4.png :results file graphics output :session *Python* :python python3 :exports both
     # setup
     plt.clf()
     fig, ax = plt.subplots()
     # add data and point customization
     ax.plot(data,marker='o',color='red')
     # add title and axis labels using the object-oriented interface
     ax.set_xlabel("Random numbers")
     ax.set_ylabel("Random values")
     ax.set_title("Random number plot (Axes customization)")
     # save plot
     plt.savefig(" ../img/axes3.png")
   #+end_src

   #+RESULTS:
   [[file:../img/axes4.png]]

4. How do you plot two graphs on top of one another?
   #+begin_src python :file  ../img/overplot.png :results file graphics output :session *Python* :python python3 :exports both
     import matplotlib.pyplot as plt
     import random
     fig,ax=plt.subplots()

     data = [random.random() for _ in range(10)] # list comprehension
     data2 = [random.random() for _ in range(10)] # list comprehension

     ax.plot(data)
     ax.plot(data2)
   #+end_src

   #+RESULTS:
   [[file:../img/overplot.png]]

   #+begin_src python :file  ../img/overplot2.png :results file graphics output :session *Python* :python python3 :exports both
     fig,ax=plt.subplots()
     ax.plot(data,
             label="data",
             color='b',
             marker='o',
             linestyle='--')
     ax.plot(data2,
             label="data2",
             color='r',
             marker='v',
             linestyle='--')
     plt.legend()
     plt.grid()
   #+end_src

   #+RESULTS:
   [[file:../img/overplot2.png]]

5. How do you make multiple small plots on one page?
   #+begin_src python :file  ../img/subplots.png :results file graphics output :session *Python* :python python3 :exports both
     import matplotlib.pyplot as plt
     plt.clf()
     fig, ax = plt.subplots(3,2)
     plt.savefig(" ../img/subplots.png")
   #+end_src

   #+RESULTS:
   [[file:../img/subplots.png]]


** Exercise: Plotting in Python

1. Using =wget= on the shell, download Seattle weather data:
   [[https://tinyurl.com/seattle-weather-csv][tinyurl.com/seattle-weather-csv]].
   #+begin_src bash :results silent
     wget -O weather.csv tinyurl.com/seattle-weather2-csv
   #+end_src

2. Check with =ls -l= on the shell that the file was created:
   #+begin_src bash :results output :exports both
     ls -l weather.csv
   #+end_src

   #+RESULTS:
   : -rw-rw-r-- 1 aletheia aletheia 761976 Nov  4 09:07 weather.csv

3. Using =head= on the shell, look at the first couple of lines of the
   file to ascertain that the data have a header:
   #+begin_src bash :results output :exports both
     head --lines=2 weather.csv
   #+end_src

   #+RESULTS:
   : "DATE","PRCP","TMAX","TMIN","RAIN"
   : "1948-01-01",0.47,51,42,"TRUE"

4. Import the data into a =pandas= data frame using =pd.read_csv=, save it
   to =df= and print the data:
   #+begin_src python :results output :session *Python* :python python3 :exports both
     import pandas as pd
     df = pd.read_csv("../data/weather.csv")
     print(df)
   #+end_src

   #+RESULTS:
   #+begin_example
                DATE  PRCP  TMAX  TMIN   RAIN
   0      1948-01-01  0.47    51    42   True
   1      1948-01-02  0.59    45    36   True
   2      1948-01-03  0.42    45    35   True
   3      1948-01-04  0.31    45    34   True
   4      1948-01-05  0.17    45    32   True
   ...           ...   ...   ...   ...    ...
   25546  2017-12-10  0.00    49    34  False
   25547  2017-12-11  0.00    49    29  False
   25548  2017-12-12  0.00    46    32  False
   25549  2017-12-13  0.00    48    34  False
   25550  2017-12-14  0.00    50    36  False

   [25551 rows x 5 columns]
   #+end_example

5. Save the first 12 rows of the data frame to =df2=
   #+begin_src python :results output :session *Python* :python python3 :exports both
     df2 = df.head(n=12)   # in R: head(df, n=12)
     print(df2)
   #+end_src

   #+RESULTS:
   #+begin_example
             DATE  PRCP  TMAX  TMIN   RAIN
   0   1948-01-01  0.47    51    42   True
   1   1948-01-02  0.59    45    36   True
   2   1948-01-03  0.42    45    35   True
   3   1948-01-04  0.31    45    34   True
   4   1948-01-05  0.17    45    32   True
   5   1948-01-06  0.44    48    39   True
   6   1948-01-07  0.41    50    40   True
   7   1948-01-08  0.04    48    35   True
   8   1948-01-09  0.12    50    31   True
   9   1948-01-10  0.74    43    34   True
   10  1948-01-11  0.01    42    32   True
   11  1948-01-12  0.00    41    26  False
   #+end_example

6. Plot maximum temperature against the date:
   #+begin_src python :file  ../img/seattle.png :results file graphics output :session *Python* :python python3 :exports both
     import matplotlib.pyplot as plt
     fig,ax=plt.subplots()
     ax.plot(df2["DATE"], df2["TMAX"])
     plt.savefig(" ../img/seattle.png")     2
   #+end_src

   #+RESULTS:
   [[file:../img/seattle.png]]

7. Hard to read! Turn the x-axis labels, tighten the layout:
   #+begin_src python :file  ../img/seattle2.png :results file graphics output :session *Python* :python python3 :exports both
     fig,ax=plt.subplots()
     ax.plot(df2["DATE"], df2["TMAX"])
     plt.xticks(rotation=45, ha='right')
     plt.tight_layout()
     plt.savefig(" ../img/seattle2.png")
   #+end_src

   #+RESULTS:
   [[file:../img/seattle2.png]]

8. Add a second plot with the minimum temperatures:
   #+begin_src python :file  ../img/seattle3.png :results file graphics output :session *Python* :python python3 :exports both
     fig,ax=plt.subplots()

     ax.plot(df2["DATE"], df2["TMAX"])
     ax.plot(df2["DATE"], df2["TMIN"])

     plt.xticks(rotation=45, ha='right')
     plt.tight_layout()
     plt.savefig(" ../img/seattle3.png")
   #+end_src

   #+RESULTS:
   [[file:../img/seattle3.png]]

9. Add a suitable title, x- and y-labels, a legend, different markers
   and colors, a legend and a grid:
   #+begin_src python :file  ../img/seattle4.png :results file graphics output :session *Python* :python python3 :exports both
     fig,ax=plt.subplots()
     ax.plot(df2["DATE"], df2["TMAX"],
             label='Max temp',
             color='b',
             marker='o',
             linestyle='--')
     ax.plot(df2["DATE"], df2["TMIN"],
             label='Min temp',
             color='r',
             marker='v',
             linestyle='--')
     plt.title("Seattle Weather Data 1948")
     plt.legend()
     plt.grid()
     plt.xticks(rotation=45, ha='right')
     plt.tight_layout()
     plt.savefig(" ../img/seattle4.png")
   #+end_src

   #+RESULTS:
   [[file:../img/seattle4.png]]

10. Put the two plots next to one another instead of on top of one
    another:
    #+begin_src python :file  ../img/seattle5.png :results file graphics output :session *Python* :python python3 :exports both
      fig,ax=plt.subplots(1,2) # same as mfrow=c(1,2) in R

      ax[0].plot(df2["DATE"],df2["TMAX"])
      ax[0].set_title("Max Temp")
      ax[0].grid(True)
      ax[0].tick_params(axis='x',rotation=45)

      ax[1].plot(df2["DATE"],df2["TMIN"])
      ax[1].set_title("Min Temp")
      ax[1].grid(True)
      ax[1].tick_params(axis='x',rotation=45)
      plt.tight_layout()
      plt.savefig(" ../img/seattle5.png")
    #+end_src

    #+RESULTS:
    [[file:../img/seattle5.png]]

11. You notice that the y-axes of these plots have different
    ranges. In R, you set =ylim= to run from the smallest (min) to the
    largest (max) value. In Python, you do the same thing:
    #+begin_src python :file  ../img/seattle6.png :results file graphics output :session *Python* :python python3 :exports both
      # create a graphical frame
      fig,ax=plt.subplots(1,2)

      # set y-axix limits to the same range
      min_temp = min(df2["TMIN"].min(),df2["TMAX"].max())
      max_temp = max(df2["TMAX"].min(),df2["TMAX"].max())

      # first plot
      ax[0].plot(df2["DATE"],df2["TMAX"])
      ax[0].set_title("Max Temp")
      ax[0].grid(True)
      ax[0].tick_params(axis='x',rotation=45)
      ax[0].set_ylim([min_temp,max_temp])

      # second plot
      ax[1].plot(df2["DATE"],df2["TMIN"])
      ax[1].set_title("Min Temp")
      ax[1].grid(True)
      ax[1].tick_params(axis='x',rotation=45)
      ax[1].set_ylim([min_temp,max_temp])

      plt.tight_layout()
      plt.savefig(" ../img/seattle6.png")
    #+end_src

    #+RESULTS:
    [[file:../img/seattle6.png]]

* DONE Week 10 - Grammar of graphics plotting lab
#+attr_html: :width 700px:
[[../img/helgoland.jpg]]

/Image: Morgenstern, "Küste von Helgoland/Coast of Helgoland" (1863)/

- [X] Graphics lab last Monday (failed)
- [X] Finish Python plotting (=subplots=).
- [X] DataCamp review: The Grammar of Graphics (gg) plotting lab.
- [X] Base R =plot= function revisited.
- [X] Next DataCamp lesson due: Stats with =matplotlib=
- [X] Next week: The =plotly= package & quiz 8 (DataCamp and ggplot2)

** Graphics practice (failed? Again? Also?)
#+attr_html: :width 400px:
[[../img/plotting_practice.png]]

- Only 6 submissions: what were *you* doing on Monday afternoon?
- Do yourself a favor and complete the practice file!
- The questions will be part of the next quiz.
- Check your solutions with the PDF and/or my video.
- Remember to keep up your DataCamp practice!


** Project: 2nd sprint review with NotebookLM/podcasts
#+attr_html: :width 600px:
[[../img/litreview.png]]

- Remember that there is no 2-for-1 (every team must submit).
- The next sprint review is on November 15 (abstract + results).

*Most interesting podcast this sprint:* Jakobe and Jackson's literature
review - good sources, and SQL database with primary data. Very well
prepared (prompted) podcast.

*Others*: Fowler inspired the podcasters because of the topic and
because of the information in his proposal (missed out scientific
publication though).

*Interestingly*, almost all of the podcasts in this project round were
shorter than the "introduction to data science" projects. The number
of sources doesn't seem to be what increases the podcast length.

*The Litmap* seems to be analyzed by the AI (according to
Keidrick/Austin/Clifford's podcast). The review was oddly detailed and
the podcasters were oddly giddy...


** DataCamp review: Grammar of Graphics lab

- [X] Conceptual comparison =ggplot2= vs. base R
- [ ] Creating simple scatterplots
- [ ] Transform plots
- [ ] Create trendlines
- [ ] Map aesthetics to variables

Download [[https://tinyurl.com/ggplot2-review-org][tinyurl.com/ggplot2-review-org]] as =ggplot2.org=
#+begin_src bash :results output :exports both
  wget -O ggplot2.org tinyurl.com/ggplot2-review-org
  ls -l ggplot2.org
#+end_src

#+RESULTS:
: -rw-rw-r-- 1 aletheia aletheia 4597 Nov  4 09:07 ggplot2.org

#+begin_src R
  system("ls -l ggplot2.org")
#+end_src

#+RESULTS:
: -rw-rw-r-- 1 aletheia aletheia 4597 Nov  4 09:07 ggplot2.org

Open Emacs on =ggplot2.org= with
#+begin_example sh
  emacs --file ggplot2.org
#+end_example

Let's work through the questions together.

* DONE Week 11: Base R Plotting [Oct 28]
#+attr_html: :width 400px:
#+caption: Conspirators plotting, by Suthamma Byrne (Saatchi Gallery)
[[../img/conspirators.jpg]]

- [X] The =plot= function revisited
- [X] Decision tree models (=rpart=)
- [X] Optional parameters for base graphics (=par=)
- [X] Multiple plots and passing parameters
- [X] Adding =text= and =points= to highlight outliers
- [ ] Customization with vectors
- [ ] Customizing axes
- [ ] Practice lab

Download [[https://tinyurl.com/plot-codealong][tinyurl.com/plot-codealong]] (again) & open it in Emacs:

#+begin_example sh
  wget -O plot.org tinyurl.com/plot-codealong
  emacs --file plot.org
#+end_example

** Trophy!

#+attr_html: :width 700px:
[[../img/trophy2.png]]

*Milestone (and Emacs tip):* I counted this morning (=M-x occur=) - in
this notebook alone (for review) we've created *200* plots alone. We're
probably way above *1,000* created plots in the whole course. *10,000*
plots make you a data visualization master!


** Review: =plot= function (part 1)

1. What does =plot= generate when you feed it with two =factor= variables?

   Sample data and data preparation:
   #+begin_src R
     str(mtcars)
   #+end_src

   #+RESULTS:
   #+begin_example
   'data.frame':        32 obs. of  11 variables:
    $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
    $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...
    $ disp: num  160 160 108 258 360 ...
    $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...
    $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
    $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
    $ qsec: num  16.5 17 18.6 19.4 17 ...
    $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
    $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
    $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
    $ carb: num  4 4 1 1 2 1 4 2 2 4 ...
   #+end_example

   Define =factor= variables:
   #+begin_src R
     mtcars$cyl -> cyl
     mtcars$gear -> gear
     table(cyl,gear) -> cyl_gear_table
     cyl_gear_table  # contingency table
   #+end_src

   #+RESULTS:
   : gear
   : cyl  3  4  5
   :   4  1  8  2
   :   6  2  4  1
   :   8 12  0  2

   Plot: attempt 1
   #+begin_src R :file  ../img/mosaic.png :session *R* :results file graphics output :exports both
     plot(x=cyl, y=gear)
   #+end_src

   #+RESULTS:
   [[file:../img/mosaic.png]]

   Plot: attempt 2
   #+begin_src R :file  ../img/mosaic2.png :session *R* :results file graphics output :exports both
     plot(cyl_gear_table)
   #+end_src

   #+RESULTS:
   [[file:../img/mosaic2.png]]

   What's the line mean?
   #+begin_src R

   #+end_src

   #+RESULTS:

2. When plotting a time series, what's the best way to visualize it?
   #+begin_src R :file  ../img/ts.png :session *R* :results file graphics output :exports both
     plot(Nile, type="b") # bullets with lines
     grid(lwd=4)
   #+end_src

   #+RESULTS:
   [[file:../img/ts.png]]

3. You've got two numeric distributions of related observations (for
   example before and after applying medication). What's the best way
   to visualize the difference statistically?
   #+begin_src R :file  ../img/boxplot.png :session *R* :results file graphics output :exports both
     library(MASS)
     data(whiteside)
     plot(whiteside$Gas ~ whiteside$Insul) # Gas as function of Insul
   #+end_src

   #+RESULTS:
   [[file:../img/boxplot.png]]

   #+begin_src R :session *R* :results output :exports both :noweb yes
     str(whiteside)
   #+end_src

   #+RESULTS:
   : 'data.frame':      56 obs. of  3 variables:
   :  $ Insul: Factor w/ 2 levels "Before","After": 1 1 1 1 1 1 1 1 1 1 ...
   :  $ Temp : num  -0.8 -0.7 0.4 2.5 2.9 3.2 3.6 3.9 4.2 4.3 ...
   :  $ Gas  : num  7.2 6.9 6.4 6 5.8 5.8 5.6 4.7 5.8 5.2 ...

4. Is there anything that you cannot do with =plot=?
   #+begin_quote
   You cannot layer plot types on top of one another - e.g. for a recursive
   partitioning tree model
   #+end_quote
   #+attr_html: :width 400px:
   #+caption: Linear regression with Whiteside data using `partykit::lmtree`
   [[../img/4_mob.png]]

5. What's the greatest advantage of using base R methods?
   #+begin_quote
   Consistent nomenclature (syntax) for many different visualization
   techniques - all functions draw on graphics parameters in =par=, just
   like they draw on =colors= for coloring, and on =options= for display.
   #+end_quote


** Review =plot= function (part 2)
#+attr_html: :width 350px:
[[../img/halloween.jpg]]

1. Are the following claims (by AI) false or true?
   #+begin_quote
   "I went to ask AI for some jokes on [R vs. Python] and apparently
   there is a bias against R it seems. Some examples -

   *Community*
   - Python: It’s like a laid-back family dinner. Everyone’s welcome,
     and there’s always room for more code.
   - R: Picture an exclusive wine-tasting club, sampling only
     Chardonnay from =ggplot2=.
   *Packages*
   - Python: Need a chart? Just install =matplotlib= and get going.
   - R: Oh, you’ll need =ggplot2=, =dplyr=, =tidyverse=, plus a barista for
     coffee and a life coach to guide you through the package jungle.
   *Errors*
   - Python: "Hey buddy, maybe try checking line 22?"
   - R: Brace yourself for a cryptic, paragraph-long poem that
     somehow leaves you questioning your existence.
   *IDE of Choice*
   - Python: Enter Jupyter Notebooks, where data and code flow like
     poetry.
   - R: Meet RStudio. Try introducing an R user to Jupyter, though,
     and it’s like asking your grandma to download TikTok."
   #+end_quote

   Source: [[https://chat.google.com/room/AAAA9Fjdv8Q/keN5uTVo5gE/keN5uTVo5gE?cls=10][See Timothy's research in the Google Chat.]]

   My answers:
   #+begin_quote
   That's hilarious. I knew AI was hostile to humans but also to R? And
   worse of all... completely false - the truth is reverse in every
   single one except (half) the first.

   - Community: R's community is definitely more academic but there's
     zero need for ggplot2.
   - Packages: The opposite is true - base R (built-in) packages get
     you almost every where, especially when it comes to data
     analytics.
   - Errors: Python errors are absurd, except the last line (but the
     errors are typified) while R's error messages are consistently
     clearer.
   - IDE: JuPyteR is for Julia, Python and R. Emacs + Org-mode for
     all. Jupyter Lab isn't an IDE but only a notebook environment
     RStudio is an IDE (though I don't like it, it's probably OK, just
     like the "Tidyverse", for those who don't like to get their
     fingers dirty...).

   Anyway, I think the R community (especially the "tidy" people) are
   their own greatest enemy - on the whole I do prefer Pythonistas, but
   you don't code with people (or AI), you code with a programming
   language (and Emacs).

   What lies does AI have for SQL?
   #+end_quote

2. Which function controls graphics for R and how can you see its
   default settings?
   #+begin_src R
     str(par())
   #+end_src

   #+RESULTS:
   #+begin_example
   List of 72
    $ xlog     : logi FALSE
    $ ylog     : logi FALSE
    $ adj      : num 0.5
    $ ann      : logi TRUE
    $ ask      : logi FALSE
    $ bg       : chr "transparent"
    $ bty      : chr "o"
    $ cex      : num 0.83
    $ cex.axis : num 1
    $ cex.lab  : num 1
    $ cex.main : num 1.2
    $ cex.sub  : num 1
    $ cin      : num [1:2] 0.15 0.2
    $ col      : chr "black"
    $ col.axis : chr "black"
    $ col.lab  : chr "black"
    $ col.main : chr "black"
    $ col.sub  : chr "black"
    $ cra      : num [1:2] 14.4 19.2
    $ crt      : num 0
    $ csi      : num 0.166
    $ cxy      : num [1:2] 0.0608 0.1015
    $ din      : num [1:2] 6.99 7
    $ err      : int 0
    $ family   : chr ""
    $ fg       : chr "black"
    $ fig      : num [1:4] 0.5 1 0 0.5
    $ fin      : num [1:2] 3.49 3.5
    $ font     : int 1
    $ font.axis: int 1
    $ font.lab : int 1
    $ font.main: int 2
    $ font.sub : int 1
    $ lab      : int [1:3] 5 5 7
    $ las      : int 0
    $ lend     : chr "round"
    $ lheight  : num 1
    $ ljoin    : chr "round"
    $ lmitre   : num 10
    $ lty      : chr "solid"
    $ lwd      : num 1
    $ mai      : num [1:4] 0.847 0.681 0.681 0.349
    $ mar      : num [1:4] 5.1 4.1 4.1 2.1
    $ mex      : num 1
    $ mfcol    : int [1:2] 2 2
    $ mfg      : int [1:4] 2 2 2 2
    $ mfrow    : int [1:2] 2 2
    $ mgp      : num [1:3] 3 1 0
    $ mkh      : num 0.001
    $ new      : logi FALSE
    $ oma      : num [1:4] 0 0 0 0
    $ omd      : num [1:4] 0 1 0 1
    $ omi      : num [1:4] 0 0 0 0
    $ page     : logi TRUE
    $ pch      : int 1
    $ pin      : num [1:2] 2.47 1.97
    $ plt      : num [1:4] 0.195 0.9 0.242 0.805
    $ ps       : int 12
    $ pty      : chr "m"
    $ smo      : num 1
    $ srt      : num 0
    $ tck      : num NA
    $ tcl      : num -0.5
    $ usr      : num [1:4] 0 1 0 1
    $ xaxp     : num [1:3] 0 1 5
    $ xaxs     : chr "r"
    $ xaxt     : chr "s"
    $ xpd      : logi FALSE
    $ yaxp     : num [1:3] 0 1 5
    $ yaxs     : chr "r"
    $ yaxt     : chr "s"
    $ ylbias   : num 0.2
   #+end_example

3. Which command sequence sets up 2 x 2 empty plots per page frame?
   #+begin_src R :file  ../img/frame.png :session *R* :results file graphics output :exports both
     par(mfrow=c(2,2))
     for (i in 1:4)
       plot(0,type="n")
   #+end_src

   #+RESULTS:
   [[file:../img/frame.png]]

4. Which =plot= parameter family controls text and symbols scales?
   #+begin_src R :file  ../img/cex.png :session *R* :results file graphics output :exports both
     plot(rnorm(100),cex=5)
   #+end_src

   #+RESULTS:
   [[file:../img/cex.png]]

5. Which =plot= parameter family controls text and symbols colors?
   #+begin_src R :file  ../img/cex2.png :session *R* :results file graphics output :exports both
     plot(rnorm(100),
          cex=5,
          col="red",
          col.axis="red")
   #+end_src

   #+RESULTS:
   [[file:../img/cex2.png]]

* DONE Week 12: Package =plotly= & Dashboard Design [Nov 4]
#+attr_html: :width 600px:
#+caption: Colorful McKinley/Roosevelt Campaign Poster (1900)
[[../img/campaign.jpg]]

*REMEMBER: NO CLASS MEETING THIS WEEK ON FRIDAY*

- [X] *Complete* next DataCamp lessons: Dashboard Design and /Power BI/.
- [X] *Complete* new quiz (9) by Nov 8 (=plotly= and =plot=).
- [X] *Finish* =plot= code along lecture: [[https://tinyurl.com/plot-codealong][tinyurl.com/plot-codealong]].
- [ ] *Review* DataCamp lesson on =plotly= (code along)
- [ ] *Complete* =plot= lab with NHANES data: [[https://tinyurl.com/plots-lab][tinyurl.com/plots-lab]].
- [ ] *Redo* the =NHANES= plot with =ggplot2= (bonus exercise).
   

* Week 13: Advanced Customization & Project sprint review [Nov 11]
#+attr_html: :width 600px:
[[../img/marriage-at-cana.jpg]]

- [ ] *Review* DataCamp lesson on =plotly= (code along)
- [ ] *Complete* =plot= lab with NHANES data: [[https://tinyurl.com/plots-lab][tinyurl.com/plots-lab]].
- [ ] *Redo* the =NHANES= plot with =ggplot2= (bonus exercise).

** IN PROGRESS DataCamp Review: The Python =plotly= package for interactive plots

- Just watch or code along: https://tinyurl.com/plotly-org

- To work through this lesson took me 2 hours ([[https://github.com/birkenkrahe/dviz/blob/main/pdf/plotly.pdf][notebook in GitHub]])

1) What is =plotly= and which programming language does it support?
   #+begin_quote
   =plotly= is a =JavaScript= library, and you can use it with Python, R,
   Julia, JavaScript, F#, MATLAB, in connection with =ggplot2=, and to
   build Dash web applications on Kubernetes containers - see
   [[https://plotly.com/graphing-libraries][plotly.com/graphing-libraries]] and [[https://dash.plotly.com/][dash.plotly.com/]].

   #+attr_html: :width 600px:
   [[../img/goscatter.png]]
   #+end_quote

2) What does Plotly's /"instant interactivity"/ mean?
   #+begin_quote
   - The figure cannot be shown in an online notebook but not in Emacs.
     #+attr_html: :width 500px:
     [[../img/colab.png]]

   - You can hover over data points.
   - There are interactive buttons (not always all present):

   [[../img/plotly_buttons.png]]
   #+end_quote

3) How is a =plotly= figure structured?
   #+begin_quote
   A Plotly figure is a "dictionary of dictionaries", because it
   organizes plot configuration and data in a hierarchical, nested
   dictionary format that allows easy access and modification of plot
   components. Each dictionary has keys and values (which can also be
   dictionaries).
   #+end_quote
   #+begin_src python :file  ../img/p.png :results file graphics none :session *Python* :python python3
     # load module and define alias
     import plotly.graph_objects as go

     # define figure as dictionary with two keys, `data` and `layout`
     figure_config = dict({
         # trace = type + data dictionary (list)
         'data': [
             {'type': 'bar',
              'x': ['Jan', 'Feb', 'Mar'],
              'y': [450, 475, 400]}],
         # layout settings = dictionary with 3 dictionaries
         'layout': { 'title': {'text': 'Sales for Jan-Mar 2020'},
                     'xaxis': {'title': 'Months'},
                     'yaxis': {'title': 'Sales'}}})
     ## create figure
     fig = go.Figure(figure_config)
     ## send figure to graphics engine for display
     fig.show()
   #+end_src

   [[file:../img/sales.png]]

   #+begin_src python :results output :session *Python* :python python3 :exports both
     print(figure_config)
   #+end_src

   #+RESULTS:
   : {'data': [{'x': ['Jan', 'Feb', 'Mar'], 'y': [450, 475, 400], 'type': 'bar'}], 'layout': {'title': {'text': 'Sales for Jan-Mar 2020'}, 'xaxis': {'title': 'Months'}, 'yaxis': {'title': 'Sales'}}}

   #+begin_example
   : {'data': [{'x': ['Jan', 'Feb', 'Mar'],
                'y': [450, 475, 400],
                'type': 'bar'}],
      'layout': {'title': {'text': 'Sales for Jan-Mar 2020'},
                 'xaxis': {'title': 'Months'},
                 'yaxis': {'title': 'Sales'}}}
   #+end_example

4) How does =plotly.express= work?
   #+begin_quote
   The =plotly.express= module specifies a =DataFrame= from the =pandas=
   package and its columns as arguments.
   #+end_quote

   #+begin_src python :results file graphics none :session *Python* :python python3 :file  ../img/p.png
     import plotly.express as px
     import pandas as pd

     weekly_temps = pd.DataFrame({
         'day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday',
                 'Friday', 'Saturday', 'Sunday'],
         'temp': [28, 27, 25, 31, 32, 35, 36]})
     fig = px.bar(
         data_frame=weekly_temps,
         x='day',
         y='temp')
     fig.show()
   #+end_src

   [[file:../img/temp.png]]

   #+begin_src python :results output :session *Python* :python python3 :exports both
     print(weekly_temps)
   #+end_src

   #+RESULTS:
   :          day  temp
   : 0     Monday    28
   : 1    Tuesday    27
   : 2  Wednesday    25
   : 3   Thursday    31
   : 4     Friday    32
   : 5   Saturday    35
   : 6     Sunday    36

5) Which /univariate/ plots do you know?
   #+begin_quote
   - Histogram
   - Bar chart
   - Box plot
   #+end_quote

6) How would you make a quick histogram with =plotly=?
   #+begin_src python :results output :session *Python* :python python3 :exports both
     revenues = pd.DataFrame({
         'Rank': range(1,6),
         'Company': ['Walmart','Sinopec Group','State Grid',
                     'China National Petroleum', 'Royal Dutch Shell'],
         'Revenue': [523964.0,407009.0,383906.0,379130.0,352106.0]})
     print(revenues)
   #+end_src

   #+RESULTS:
   :    Rank                   Company   Revenue
   : 0     1                   Walmart  523964.0
   : 1     2             Sinopec Group  407009.0
   : 2     3                State Grid  383906.0
   : 3     4  China National Petroleum  379130.0
   : 4     5         Royal Dutch Shell  352106.0

   #+begin_src python :file  ../img/p.png :results file graphics none :session *Python* :python python3
     import pandas as pd
     import plotly.express as px
     fig = px.histogram(
         data_frame=revenues,
         x='Revenue')
     fig.show()
   #+end_src

   [[file:../img/revenue.png]]

7) How could you used =color= in the bar chart for this data frame?
   #+begin_src python :results output :session *Python* :python python3 :exports both
     import pandas as pd
     import plotly.express as px

     student_scores = pd.DataFrame({
         'name': ['John','Julia','Xuan','Harry'],
         'score': [80,97,90,85],
         'city': ['Batesville','Little Rock','Melbourne','Conway']})
     print(student_scores)
   #+end_src

   #+RESULTS:
   :     name  score         city
   : 0   John     80   Batesville
   : 1  Julia     97  Little Rock
   : 2   Xuan     90    Melbourne
   : 3  Harry     85       Conway

   #+begin_src python :file  ../img/p.png :results file graphics none :session *Python* :python python3
     import plotly.express as px
     fig=px.bar(
         data_frame=student_scores,
         x='name',
         y='score',
         color='city')
     fig.show()
   #+end_src

   [[file:../img/student_scores.png]]

8) How can you find out which methods a module contains? E.g. when you
   get a =TypeError= because a parameter (=color_continous_scale=) is not
   recognized?

   #+begin_example python
     dir(px) # lists methods in plotly.express
     help(px.bar) # lists definition and parameters in `bar`
   #+end_example

   #+begin_src python
     [print(_) for _ in dir(px)] # returns `bar` among others
   #+end_src

   #+RESULTS:

   #+begin_src python :results output :session *Python* :python python3 :exports both
     help(px.bar)
   #+end_src

   #+RESULTS:
   #+begin_example
   Help on function bar in module plotly.express._chart_types:

   bar(data_frame=None, x=None, y=None, color=None, pattern_shape=None, facet_row=None, facet_col=None, facet_col_wrap=0, facet_row_spacing=None, facet_col_spacing=None, hover_name=None, hover_data=None, custom_data=None, text=None, base=None, error_x=None, error_x_minus=None, error_y=None, error_y_minus=None, animation_frame=None, animation_group=None, category_orders=None, labels=None, color_discrete_sequence=None, color_discrete_map=None, color_continuous_scale=None, pattern_shape_sequence=None, pattern_shape_map=None, range_color=None, color_continuous_midpoint=None, opacity=None, orientation=None, barmode='relative', log_x=False, log_y=False, range_x=None, range_y=None, text_auto=False, title=None, template=None, width=None, height=None) -> plotly.graph_objs._figure.Figure
           In a bar plot, each row of `data_frame` is represented as a rectangular
           mark.

       Parameters
       ----------
       data_frame: DataFrame or array-like or dict
           This argument needs to be passed for column names (and not keyword
           names) to be used. Array-like and dict are transformed internally to a
           pandas DataFrame. Optional: if missing, a DataFrame gets constructed
           under the hood using the other arguments.
       x: str or int or Series or array-like
           Either a name of a column in `data_frame`, or a pandas Series or
           array_like object. Values from this column or array_like are used to
           position marks along the x axis in cartesian coordinates. Either `x` or
           `y` can optionally be a list of column references or array_likes,  in
           which case the data will be treated as if it were 'wide' rather than
           'long'.
       y: str or int or Series or array-like
           Either a name of a column in `data_frame`, or a pandas Series or
           array_like object. Values from this column or array_like are used to
           position marks along the y axis in cartesian coordinates. Either `x` or
           `y` can optionally be a list of column references or array_likes,  in
           which case the data will be treated as if it were 'wide' rather than
           'long'.
       color: str or int or Series or array-like
           Either a name of a column in `data_frame`, or a pandas Series or
           array_like object. Values from this column or array_like are used to
           assign color to marks.
       pattern_shape: str or int or Series or array-like
           Either a name of a column in `data_frame`, or a pandas Series or
           array_like object. Values from this column or array_like are used to
           assign pattern shapes to marks.
       facet_row: str or int or Series or array-like
           Either a name of a column in `data_frame`, or a pandas Series or
           array_like object. Values from this column or array_like are used to
           assign marks to facetted subplots in the vertical direction.
       facet_col: str or int or Series or array-like
           Either a name of a column in `data_frame`, or a pandas Series or
           array_like object. Values from this column or array_like are used to
           assign marks to facetted subplots in the horizontal direction.
       facet_col_wrap: int
           Maximum number of facet columns. Wraps the column variable at this
           width, so that the column facets span multiple rows. Ignored if 0, and
           forced to 0 if `facet_row` or a `marginal` is set.
       facet_row_spacing: float between 0 and 1
           Spacing between facet rows, in paper units. Default is 0.03 or 0.07
           when facet_col_wrap is used.
       facet_col_spacing: float between 0 and 1
           Spacing between facet columns, in paper units Default is 0.02.
       hover_name: str or int or Series or array-like
           Either a name of a column in `data_frame`, or a pandas Series or
           array_like object. Values from this column or array_like appear in bold
           in the hover tooltip.
       hover_data: str, or list of str or int, or Series or array-like, or dict
           Either a name or list of names of columns in `data_frame`, or pandas
           Series, or array_like objects or a dict with column names as keys, with
           values True (for default formatting) False (in order to remove this
           column from hover information), or a formatting string, for example
           ':.3f' or '|%a' or list-like data to appear in the hover tooltip or
           tuples with a bool or formatting string as first element, and list-like
           data to appear in hover as second element Values from these columns
           appear as extra data in the hover tooltip.
       custom_data: str, or list of str or int, or Series or array-like
           Either name or list of names of columns in `data_frame`, or pandas
           Series, or array_like objects Values from these columns are extra data,
           to be used in widgets or Dash callbacks for example. This data is not
           user-visible but is included in events emitted by the figure (lasso
           selection etc.)
       text: str or int or Series or array-like
           Either a name of a column in `data_frame`, or a pandas Series or
           array_like object. Values from this column or array_like appear in the
           figure as text labels.
       base: str or int or Series or array-like
           Either a name of a column in `data_frame`, or a pandas Series or
           array_like object. Values from this column or array_like are used to
           position the base of the bar.
       error_x: str or int or Series or array-like
           Either a name of a column in `data_frame`, or a pandas Series or
           array_like object. Values from this column or array_like are used to
           size x-axis error bars. If `error_x_minus` is `None`, error bars will
           be symmetrical, otherwise `error_x` is used for the positive direction
           only.
       error_x_minus: str or int or Series or array-like
           Either a name of a column in `data_frame`, or a pandas Series or
           array_like object. Values from this column or array_like are used to
           size x-axis error bars in the negative direction. Ignored if `error_x`
           is `None`.
       error_y: str or int or Series or array-like
           Either a name of a column in `data_frame`, or a pandas Series or
           array_like object. Values from this column or array_like are used to
           size y-axis error bars. If `error_y_minus` is `None`, error bars will
           be symmetrical, otherwise `error_y` is used for the positive direction
           only.
       error_y_minus: str or int or Series or array-like
           Either a name of a column in `data_frame`, or a pandas Series or
           array_like object. Values from this column or array_like are used to
           size y-axis error bars in the negative direction. Ignored if `error_y`
           is `None`.
       animation_frame: str or int or Series or array-like
           Either a name of a column in `data_frame`, or a pandas Series or
           array_like object. Values from this column or array_like are used to
           assign marks to animation frames.
       animation_group: str or int or Series or array-like
           Either a name of a column in `data_frame`, or a pandas Series or
           array_like object. Values from this column or array_like are used to
           provide object-constancy across animation frames: rows with matching
           `animation_group`s will be treated as if they describe the same object
           in each frame.
       category_orders: dict with str keys and list of str values (default `{}`)
           By default, in Python 3.6+, the order of categorical values in axes,
           legends and facets depends on the order in which these values are first
           encountered in `data_frame` (and no order is guaranteed by default in
           Python below 3.6). This parameter is used to force a specific ordering
           of values per column. The keys of this dict should correspond to column
           names, and the values should be lists of strings corresponding to the
           specific display order desired.
       labels: dict with str keys and str values (default `{}`)
           By default, column names are used in the figure for axis titles, legend
           entries and hovers. This parameter allows this to be overridden. The
           keys of this dict should correspond to column names, and the values
           should correspond to the desired label to be displayed.
       color_discrete_sequence: list of str
           Strings should define valid CSS-colors. When `color` is set and the
           values in the corresponding column are not numeric, values in that
           column are assigned colors by cycling through `color_discrete_sequence`
           in the order described in `category_orders`, unless the value of
           `color` is a key in `color_discrete_map`. Various useful color
           sequences are available in the `plotly.express.colors` submodules,
           specifically `plotly.express.colors.qualitative`.
       color_discrete_map: dict with str keys and str values (default `{}`)
           String values should define valid CSS-colors Used to override
           `color_discrete_sequence` to assign a specific colors to marks
           corresponding with specific values. Keys in `color_discrete_map` should
           be values in the column denoted by `color`. Alternatively, if the
           values of `color` are valid colors, the string `'identity'` may be
           passed to cause them to be used directly.
       color_continuous_scale: list of str
           Strings should define valid CSS-colors This list is used to build a
           continuous color scale when the column denoted by `color` contains
           numeric data. Various useful color scales are available in the
           `plotly.express.colors` submodules, specifically
           `plotly.express.colors.sequential`, `plotly.express.colors.diverging`
           and `plotly.express.colors.cyclical`.
       pattern_shape_sequence: list of str
           Strings should define valid plotly.js patterns-shapes. When
           `pattern_shape` is set, values in that column are assigned patterns-
           shapes by cycling through `pattern_shape_sequence` in the order
           described in `category_orders`, unless the value of `pattern_shape` is
           a key in `pattern_shape_map`.
       pattern_shape_map: dict with str keys and str values (default `{}`)
           Strings values define plotly.js patterns-shapes. Used to override
           `pattern_shape_sequences` to assign a specific patterns-shapes to lines
           corresponding with specific values. Keys in `pattern_shape_map` should
           be values in the column denoted by `pattern_shape`. Alternatively, if
           the values of `pattern_shape` are valid patterns-shapes names, the
           string `'identity'` may be passed to cause them to be used directly.
       range_color: list of two numbers
           If provided, overrides auto-scaling on the continuous color scale.
       color_continuous_midpoint: number (default `None`)
           If set, computes the bounds of the continuous color scale to have the
           desired midpoint. Setting this value is recommended when using
           `plotly.express.colors.diverging` color scales as the inputs to
           `color_continuous_scale`.
       opacity: float
           Value between 0 and 1. Sets the opacity for markers.
       orientation: str, one of `'h'` for horizontal or `'v'` for vertical.
           (default `'v'` if `x` and `y` are provided and both continous or both
           categorical,  otherwise `'v'`(`'h'`) if `x`(`y`) is categorical and
           `y`(`x`) is continuous,  otherwise `'v'`(`'h'`) if only `x`(`y`) is
           provided)
       barmode: str (default `'relative'`)
           One of `'group'`, `'overlay'` or `'relative'` In `'relative'` mode,
           bars are stacked above zero for positive values and below zero for
           negative values. In `'overlay'` mode, bars are drawn on top of one
           another. In `'group'` mode, bars are placed beside each other.
       log_x: boolean (default `False`)
           If `True`, the x-axis is log-scaled in cartesian coordinates.
       log_y: boolean (default `False`)
           If `True`, the y-axis is log-scaled in cartesian coordinates.
       range_x: list of two numbers
           If provided, overrides auto-scaling on the x-axis in cartesian
           coordinates.
       range_y: list of two numbers
           If provided, overrides auto-scaling on the y-axis in cartesian
           coordinates.
       text_auto: bool or string (default `False`)
           If `True` or a string, the x or y or z values will be displayed as
           text, depending on the orientation A string like `'.2f'` will be
           interpreted as a `texttemplate` numeric formatting directive.
       title: str
           The figure title.
       template: str or dict or plotly.graph_objects.layout.Template instance
           The figure template name (must be a key in plotly.io.templates) or
           definition.
       width: int (default `None`)
           The figure width in pixels.
       height: int (default `None`)
           The figure height in pixels.

       Returns
       -------
           plotly.graph_objects.Figure
   #+end_example

9) How can you construct your own color range?
   #+begin_quote
   - Construct the scale as a list of =rgb= codes
   - Use it with =color_continuous_scale=
   #+end_quote

   #+begin_src python :file ../img/p.png :results file graphics none :session *Python* :python python3 :exports both
     ## import libraries
     import plotly.express as px
     import pandas as pd

     ## create sample data frame
     weekly_temps = pd.DataFrame({
         'day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday',
                 'Friday', 'Saturday', 'Sunday'],
         'temp': [28, 27, 25, 31, 32, 35, 36]})

     ## create color scale: yellow through orange to red
     my_scale=[('rgb(242,238,10)'),
               ('rgb(242,95,10)'),
               ('rgb(255,0,0)')]

     ## create figure
     fig=px.bar(
         data_frame=weekly_temps,
         x='day', # categorical
         y='temp', # numerical
         color_continuous_scale=my_scale,
         color='temp')
     ## show figure
     fig.show()
   #+end_src

10) What you can do with =plotly= box plots?
    #+begin_quote
    - Specify =hover_data= as a list of column names
    - Specify how to show outliers with =points=
    #+end_quote

The lessons of the =plotly= course follow this (classical) path:
1) Univariate plots (one dependent variable)
2) Bivariate plots (plot and compare two variables)
3) Advanced customization (presentation mode)
4) Advanced interactivity (web application mode)


** Base R =plot= lab


** TODO DataCamp review: Dashboard Design Concepts

* Week 14: Power BI [Nov 25]


* Week 15: Final presentations [Dec 2]
