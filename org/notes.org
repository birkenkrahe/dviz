#+TITLE: NOTEBOOK - DATA VISUALIZATION
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: DSC 302 Lyon College Fall 2024
#+STARTUP: overview hideblocks indent entitiespretty:
#+PROPERTY: header-args:R :session *R* :results output :exports both
* Week 0 - Orientation & Examples

#+attr_html: :width 200px:
[[../img/Ways-to-Search-Google.jpg]]

What we achieved in our first session: Course orientation, and
critical discussion of a few visualization examples.

* Week 1 - What is Data Visualization & =mtcars= Demo
#+attr_html: :width 600px:
#+caption: Napoleon's Retreat from Moscow - Adolph Northen (1851)
[[../img/napoleon.jpg]]

This file, =notes.org= ([[https://github.com/birkenkrahe/dviz/blob/main/org/notes.org][GitHub]]) contains a log of class activities.

** Project: published [[https://lyon.instructure.com/courses/2629/assignments/32827][1st sprint review instructions]] - get cracking!

** Review questions:

1. What is data science mainly concerned with?
   #+begin_quote
   Data science is mainly concerned with identifying patterns in data
   and interpreting or predicting them.
   #+end_quote
2. Characterize Minard's 1869 chart - how would you describe it in
   your own words?
   #+attr_html: :width 700px:
   [[../img/1_minard.png]]
   #+begin_quote
   The chart ("tableau graphique") is a kind of (1) "Sankey diagram"
   used even today to (2) visualize flow, the change of a quantity
   over time - in this case the dwindling size of Napoleon's army
   during the 1812-1813 Russia campaign that ended with his occupation
   of a (burning) Moscow. Other data shown: (3) geography (location
   and distance), (4) temperature changes along the way, time (during
   the campaign). Fun fact: These diagrams are named after the British
   engineer, who used it in 1898 to represent energy efficiency of a
   steam engine to illustrate how energy was conserved or lost during
   operation ([[https://en.wikipedia.org/wiki/Sankey_diagram#/media/File:JIE_Sankey_V5_Fig1.png][see here]]). It's used by Google (see: [[https://developers.google.com/chart/interactive/docs/gallery/sankey][Google Charts]]).
   #+end_quote
3. (*Discuss with your neighbor:*) How would you rate the quality of
   Minard's chart as a data visualiation - what's good and what's
   perhaps not so good about it?
   #+begin_quote
   | PROS                                         | CONS                                   |
   |----------------------------------------------+----------------------------------------|
   | Brings many different kinds of data together | We're not told where the data are from |
   | Color is used sparingly, focus is on flow    | The chart is in French only            |
   | You can grasp the story with one glance      | Temperature is given in Reaumur        |
   | The chart looks aesthetically pleasing       | The artistic quality is distracting    |
   #+end_quote
4. What are the stages of the "data pipeline"?
   #+begin_quote
   1. Data storage and transformation
   2. Data modeling
   3. Data analysis (EDA)
   4. Data visualization
   5. Data storytelling (insights)
   #+end_quote
5. Which popular commercial data visualization tools do you know?
   #+begin_quote
   *Tableau* (by Salesforce) and *Power BI* (by Microsoft) are the two
   most popular (in business) data visualization tools. They are
   essentially dashboards with integrated data analysis tools. In this
   course, you will get an introduction to Power BI. Another
   super-useful skill is *CAD/CAM* (Computer-Aided Design /
   Computer-Aided Manufacturing). Some of our graduates learnt it in
   high school (!) and used it to enter successful careers. Perhaps we
   can get them to come back and do a workshop for us - any interest?
   #+end_quote
   #+attr_html: :width 600px:
   [[../img/powerbi.png]]

   #+attr_html: :width 600px:
   [[../img/tableau1.png]]
6. What is the main purpose of computing trendlines?
   #+begin_quote
   The main purpose of computing trendlines is to draw statistical
   conclusions from sample data. Here, "statistical" means both using
   mathematical methods in statistics, and "based on probability
   theory" and certain assumptions, which are encapsulated in the
   sample data, especially in its features and records.
   #+end_quote

** Codealong: A simple trendline example using =mtcars= data

See =2_trendline.org= ([[https://github.com/birkenkrahe/dviz/blob/main/org/2_trendline.org][GitHub]])

** Review questions - Shell

1. Login Google Cloud Shell
   #+begin_quote
   URL: =shell.cloud.google.com= or =cloud.google.com/shell=
   #+end_quote
2. Plot directly from the R console
   #+begin_quote
   > png("random.png")    # prepare graphics file (don't create it)
   > plot(rnorm(1000))    # plot 1000 random points to file
   > dev.off()            # close graphics device
   #+end_quote
3. What does the GitHub Hello World Project consist of?
   #+begin_quote
   1. Create a =public= repo[sitory] =hello-world= with a =README= file, a
      =.gitignore= template, and a copyright =LICENSE= file.
   2. Create a new branch called =readme-edits= besides the =main= branch.
   3. Make a change to =README.md= in the =readme-edits= branch.
   4. =Commit= the change (the branches have now diverged).
   5. The =main= branch now has a =pull= request for the changes made.
   6. After checking out the changes, the branches are =merged=.

   Demo: remote updating with =git= on the command-line.
   #+end_quote
4. How can you check in Linux if R is available?
   #+begin_src bash :results output :exports both
     which R      # location of the program (Linux only)
     R --version  # version of the installed program
     R --vanilla  # start R without an environment (for demo only)
   #+end_src
5. How can you get R? (In Linux or Windows)
   #+begin_quote
   - Linux command-line, run =sudo apt install r-base -y=
   - In Windows: download R binary from r-projects.org
   #+end_quote
6. What is =ess=?
   #+begin_quote
   "Emacs Speaks Statistics" (see [[https://ess.r-project.org][ess.r-project.org]]) is an Emacs
   package that connects Emacs and R so that R can be run inside Emacs
   (also works for other statistical analysis programs).
   #+end_quote
7. How can you get =ess=?
   #+begin_quote
   - Run =M-x list-packages= inside Emacs
   - Find (=C-s=) the =ess= package
   - Mark for install with =i=
   - Run install with =x=
   #+end_quote
8. What is R's workspace?
   #+begin_quote
   The workspace is where all user-defined variables or functions are
   stored to be loaded when R is started next. You can opt to not save
   the workspace when you leave the R console with =q()=.
   #+end_quote
9. How does an R source code block in Org-mode look like?
   #+begin_example Org
     #+begin_src R :session *R* :results output
       ## code
     #+end_src
   #+end_example
10. What is needed to compute & plot a trendline model on a dataset?
    #+begin_quote
    Four R functions:
    1) A dataset (=data=)
    2) A plotting function (=plot=)
    3) A linear regression model function (=lm=)
    4) A way to draw the trendline (=abline=)
    #+end_quote

* Week 2 - Linux Party & Introduction to Visualization
#+attr_html: :width 400px:
[[../img/mtcars_lm.png]]

- [X] Review: First DataCamp lesson
- [X] Google Colab coding platform
- [X] Catching up (or moving fasteR) on R
- [ ] Exploratory Data Analysis with R
- [X] Review: Second DataCamp lesson

** Review: DataCamp's "Visualizing distributions"

*Note:* For the test, you need to know all the concepts mentioned in the
DataCamp lesson, not only the ones that we're reviewing here.

/Fire up your Emacs Org-mode file testR.org to code along./ For a
different experience, use Google Colab at [[https://colab.research.google.com/][colab.research.google.com]].

1. What is a "data distribution"?
   #+begin_quote
   A data distribution is a collection of data points (literally
   points, e.g. (x,y) in the plane) exhibiting a pattern in terms of
   - Centrality (indicating where the data are centered)
   - Spread (degree of distance from the center)
   - Shape (or Gestalt - symmetry)
   - Outliers (points not part of the "central" pattern)
   - Underlying probabilistic distribution (e.g. Gaussian distribution)
   #+end_quote
2. How can you gain insights into data distributions?
   #+begin_quote
   - By calculating summary statistics (mean, median, standard deviation)
   - By running models (linear and logistic regression)
   - By drawing plots (e.g. scatterplots, histograms, barplots)
   #+end_quote
3. What is the "Datasaurus Dozen"?
   #+begin_quote
   The "Datasaurus Dozen" is a dataset created to illustrate the
   importance of visualizing data before analyzing it. The data have
   almost identical summary statistics but totally different visual
   patterns. The data are the bigger version of the "Anscombe
   quartet".
   #+end_quote

   #+begin_src R :session *R* :results output :exports both
     data(anscombe)
     summary(anscombe)
   #+end_src
4. What's the difference between continuous and categorical
   variables - can you give examples for each?
   #+begin_quote
   - Continous variables are usually numeric from the (mathematical )
     set of real numbers $\mathbb{R}$. Example: temperature, height.
   - Categorical variables are from a finite, discrete subset that can
     be mapped onto the set of whole numbers $\mathbb{Z}$ (though the
     mapping is more meaningful for ordered sets). Example: countries.
   - In R, categorical variables are represented as =factor= vectors.
   #+end_quote

5. When should you use a histogram and what are you looking for?
   #+begin_quote
   You use histograms to visualize frequencies (counts) of a single,
   continuous variable. Example: water flow through the river =Nile=.

   You're looking for the shape of the frequency distribution.
   #+end_quote

   #+begin_src R :file nile.png :session *R* :results file graphics output :exports both
     hist(Nile)
   #+end_src

6. When should you use a boxplot (cat-and-whiskers)?
   #+begin_quote
   You use a boxplot to visualize the distribution of a continuous
   variable split by a categorical variable.

   You use boxplots e.g. to compare the distributions of the
   continuous variable for each category. Example: =ToothGrowth= length
   of Guinea Pigs by vitamin C source =supp=.
   #+end_quote

   #+begin_src R :file tg.png :session *R* :results file graphics output :exports both
     data(ToothGrowth)
     tg <- ToothGrowth
     boxplot(tg$len ~ tg$supp)
   #+end_src

   #+RESULTS:
   [[file:tg.png]]

** Linux server has arrived

- You should have received your VM server address and password

- Start "Remote Desktop Protocol" on your (Windows) PC

- Enter the server name (e.g. =cslinux01.lyon.edu=) => =Connect=

- Login the =Xorg= session with username = =firstname.lastname= and pw

- Do not shut down or log out of the VM but only close the window

- Download config file with =wget -O .emacs https://tinyurl.com/lyon-emacs=

- Start Emacs and install ESS package with =list-packages= followed by =i=
  and =x= with the cursor on the line of the =ess= package

- To test, create a sample R file =testR.org= with a code block (create
  with =<s <TAB>=) and run it (with =C-c C-c=):
  #+begin_example
  #+property: header-args:R :session *R* :results output
  * Sample file
    #+begin_src R
      str(mtcars)
    #+end_src
  #+end_example

** Review questions "Visualizing two variables" (DataCamp)

1. What is a scatter plot?
   #+begin_quote
   A plot of two continuous variables whose relationship we wish to
   know.
   #+end_quote
   Example:
   #+begin_src R :file ../img/scatter.png :session *R* :results file graphics output :exports both
     plot(x=mtcars$wt,
          y=mtcars$mpg,
          type="p",
          pch=16)
   #+end_src

   #+RESULTS:
   [[file:../img/scatter.png]]

2. The points in a scatter plot are all bunched up in one corner. What
   could you do about that?
   #+begin_quote
   You could transform one, or both axes with some function that
   stretches the scale - e.g. a logarithm or a square function.
   #+end_quote
   Example:
   #+begin_src R :file ../img/scatter2.png :session *R* :results file graphics output :exports both
     ## Assuming you have your data in two vectors: 'area' and 'price'
     ## Example data
     area <- c(500, 1000, 2000, 2500, 3600, 4000, 4500, 5000, 30000, 50000)
     price <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 100)

     ## 1 x 2 plot pane to scale
     par(mfrow=c(1,2),pty="s")

     ## Create scatter plot from the data
     plot(area, price,
          xlab="Area (ft²)",
          ylab="Price (in millions USD)",
          main="Scatter Plot",
          xlim=range(area), ylim=range(price))
     grid()

     ## Create the scatter plot with log-transformed axes
     plot(log10(area), log10(price),
          xlab="Log Area (ft²)",
          ylab="Log Price (in millions USD)",
          main="Log-Transformed",
          xlim=log10(range(area)), ylim=log10(range(price)),
          pch=19)
     grid()
   #+end_src

   #+RESULTS:
   [[file:../img/scatter2.png]]

3. What's a measure of "correlation", and what does it mean?
   #+begin_quote
   A measure of correlation of two vectors of same length x, y is how
   well you can draw a straight line through the points (x,y). High
   correlation means that the values of x and y rise and fall
   together linearly.
   #+end_quote

4. What does a good linear fit through a logarithmic plot mean for the
   distribution in practice?
   #+begin_quote
   A good linear fit in a logarithmic (or semi-logarithmic) plot means
   that the points are exponentially correlated.
   #+end_quote

5. When should you use a line plot? What's an example?
   #+begin_quote
   - You have two continous variables
   - You want to know how their values relate to each other
   - You know that consecutive observations are connected

   An example would be plot of connected observations over time (also
   called a 'time series'). Line plots can be overlayed easily.
   #+end_quote
   Example:
   #+begin_src R :file ts3.png :session *R* :results file graphics output :exports both
     ## First plot
     plot(Nile,ylab="Flow", main="Overlayed Plot of Nile Data")

     ## Overlay a new plot on top of the existing one
     par(new=TRUE)

     ## Second plot (on top of the first plot)
     plot(Nile+100,
          col="red",
          axes=FALSE,  ## don't print axes
          xlab="",
          ylab="",
          ylim=range(Nile, Nile+100))  ## Ensure the y-limits match the first plot
   #+end_src

   #+RESULTS:
   [[file:ts3.png]]


6. What's the relationship between time as the independent variable
   and a line plot as a suitable visualization?
   #+begin_quote
   - Time on the x-axis (measurements over time) does not always mean
     line-plot, and you don't need time on the x-axis for meaningful
     line plots.

   - In terms of logic, this means that time on the x-axis is neither
     a sufficient nor a necessary criterion for a line plot:
     1) Measurements over time do not lend themselves to line plots if
        the observations are not conceptually connected over
        time. Example: critics scores as a function of songs published
        over time (just a bunch of dots).
     2) A line plot over time may not yield the best insights if
        another variable contains the story. Example: number of
        offenders in different age groups over time.
   #+end_quote

7. What's your view on using COVID-19 data in this introductory
   lesson? Pros and Cons?
   #+begin_quote
   - Pro: highly relevant to today's population, and much discussed
     (though perhaps not so much now). Lots of data to be found.
   - Con: Years after the epidemic, some of the data are highly
     contested and it may be difficult to ascertain their validity.
   #+end_quote

8. When should you use a barplot, and what's an example?
   #+begin_quote
   Bar plots are used when you want counts or percentages of a
   categorical variable. They look similar to histograms, which
   represent counts or frequencies over a continuous numeric variable.

   Example: The =ToothGrowth= dataset has a numeric variable, =len= (tooth
   length), and a categorical variable, =supp= (Vitamin C supply type),
   and we can ask (1) how are the lengths distributed across the
   observations (each being a different guinea pig), and (2) how many
   observations (guinea pigs) were given each supply?
   #+end_quote
   Code examples:
   #+begin_src R :file ../img/len.png :session *R* :results file graphics output :exports both
     ## bar plot of the tooth lengths over all observations
     tg <- ToothGrowth
     barplot(height = tg$len, # better: with `sort`
             xlab = "Guinea pigs", # categorical (independent) variable
             ylab = "Length", # numeric (dependent) variable
             main = "Tooth lengths in ToothGrowth")
   #+end_src

   #+RESULTS:
   [[file:../img/len.png]]

   #+begin_src R :file ../img/supp.png :session *R* :results file graphics output :exports both
     ## bar plot of the number of observations in each supply type dataset
     supp <- table(tg$supp)
     barplot(height = supp)
   #+end_src

   #+RESULTS:
   [[file:../img/supp.png]]

   More interesting:
   #+begin_src R :file ../img/supp2.png :session *R* :results file graphics output :exports both
                                             # More interesting: how many observations in each group had length > 15 mm?
     supp15 <- table(tg$supp[tg$len>15])
     barplot(height = supp15,
             xlab = "Supply type", # categorical (independent) variable
             ylab = "Number of guinea pigs", # numeric (dependent) variable
             main = "Guinea pigs in ToothGrowth with tooth length > 15 mm")
   #+end_src

   #+RESULTS:
   [[file:../img/supp2.png]]

   The same information is, in this simple case much more easily
   obtained with a =table=:
   #+begin_src R :session *R* :results output :exports both
     supp # equal number of guinea pigs in each supply group
     supp15  # different number of guinea pigs in a subset of len > 15 mm
   #+end_src

   #+RESULTS:
   :
   : OJ VC
   : 30 30
   :
   : OJ VC
   : 23 18

9. What are the two versions of bar plots?
   #+begin_quote
   1. Stacked or on top of one another (to show percentages)
   2. Dodged or side-by-side (to show relative heights)
   #+end_quote

10. What is the difference in purpose between box plots and bar plots?
    #+begin_quote
    - Box plots answer questions about spread of a distribution. In
      the example: the spread of age across different royal British
      houses, or the spread of tooth lengths across different supply
      levels.
    - Bar plots answer questions about a single (numeric) metric
      relative to zero (the height). In the example: number of rules
      from different royal British houses. Could pick other (numeric)
      features, e.g. mean age at the start of rule in the example.
    #+end_quote
    #+attr_html: :width 600px:
    [[../img/boxbar1.png]]

    #+attr_html: :width 600px:
    [[../img/boxbar.png]]

11. How do dot plots relate to bar plots?
    #+begin_quote
    - You can plot multiple metrics with them
    - You can use a logarithmic scale with them
    #+end_quote

    #+begin_src R :file ../img/lendot.png :session *R* :results file graphics output :exports both
      tg <- ToothGrowth
      ## bar plot of the tooth lengths over all observations
      dotchart(x = sort(tg$len), # better: with `sort`
               xlab = "Guinea pigs", # categorical (independent) variable
               ylab = "Length", # numeric (dependent) variable
               main = "Tooth lengths in ToothGrowth")
    #+end_src

    #+RESULTS:
    [[file:../img/lendot.png]]

** Exploratory Data Analysis (EDA) with R (Lecture & practice)
#+attr_html: :width 250px:
[[../img/1_textbook.jpg]]

- What if you don't know any R at all?
  #+begin_quote
  I will introduce the necessary commands to you. Vectors and data
  frames are the only data structures that you need, and loops are not
  needed because *vectorization* and the =apply= functions are available.
  #+end_quote

- What if I feel I need more R
  #+begin_quote
  Complete the DataCamp course "Introduction to R" in 2-4 hours on
  your own. If you're in DSC 105, you need to complete this anyway.
  #+end_quote

- What if I don't like DataCamp or I want to move faster?
  #+begin_quote
  Fork & work through Norm Matloff's "fasteR" tutorial on GitHub at
  [[https://github.com/matloff/fasteR][github.com/matloff/fasteR]]. It's the best resource for non-comp-sci
  people available. Matloff is a statistician + computer scientist + R
  champion. His book "The Art of R Programming" is a jewel, too.
  #+end_quote

* Week 3 - Emacs + R + Linux
#+attr_html: :width 400px:
[[../img/R_Emacs_Linux.png]]

/Image: You need to master language, OS, and IDE./

- [X] Quiz 2 is live - complete it by Friday September 6, 11:59 PM
- [X] Enter project team & idea in Canvas ([[https://lyon.instructure.com/courses/2629/pages][wiki]]) by Friday 11 AM
- [X] Emacs: add automatic code block header
- [X] Practice: finish the 'dot plot' example from the DataCamp review
- [ ] Review DataCamp lesson "The Color and the Shape"

** DONE Warm-up: The Dark Matter Mystery

What's wrong with this from a data visualization point of view?

#+attr_html: :width 500px:
[[../img/darkmatter.png]]

If you're intrigued and have a lot of time on your hands: [[https://arxiv.org/abs/2406.01705][Here]] is a
review of everything we don't know about Dark Matter (06/2024) by
Cirelli, Strumia and Zupan (arxiv.org preprint - 515 pages).


** DONE Emacs - Add automatic code block headers (a CSC 302 bonus)

Open Zoom + a GUI Emacs (not =emacs -nw=)

1. In Emacs, you can look up variables with =C-h v= - for example =C-h v
   org-babel-C-compiler= (its value is gcc)

2. Look up the variable =org-structure-template-alist=. In the buffer
   that opens, move the cursor to =customize= and click the link,

3. In the next buffer, you see how =<s= works (for a =src= code block), and
   also =<e= (for an =example= block).

4. Move to the end of the page (=M->=) then click on =INS=, and then enter:
   #+begin_example
   Key: r
   Template: src R :session *R* :results output :exports both
   #+end_example
   This will give you =<r=, which will expand to an R code block.

5. Enter another shorthand for graphics:
   #+begin_example
   Key: rg
   Template: src R :file plot.png :results file graphics output :session *R* :exports both
   #+end_example
   This gives you a code block for graphics output - =plot.png= is the
   name of your plot image file (you can change it when you code).

6. In the same way you could add a short code for the =#+PROPERTY:= line
   if you wanted to.

7. Before leaving this buffer, go back up (=M-<=) and click on =Apply and
   Save= - this will add the customization to your =.emacs= configuration
   file.

8. The other useful shorthand is the =#+startup= meta data at the top of
   each file. This is run by another variable, =org-tempo-keywords-alist=.

9. Open it's menu with =C-h v org-tempo-keywords-alist=.

10. Again, find and click on =customize=.

11. In the customization buffer, Go to the end of the list and insert with =INS=:
    #+begin_example
    Key: S
    Keyword: STARTUP: overview hideblocks indent
    #+end_example

12. At the top, click on =Apply and Save= to fix the setting.

13. These settings should be active right away but they will certainly
    be active when you open Emacs next.


** NEXT Test block header and learn more about the shells

Test the new setup in a =.org= file with a graphics command:

   1. Enter =<rg <TAB>=

   2. In the code block, add =Nile.png= after the =:file= header argument

   3. Add and run the code =hist(Nile)=

   4. You should get the following result: code block with =#+RESULTS=
      block and link to the graphics file that you can open with =<F6>=
      or in another buffer with =C-c C-o=:

      #+begin_src R :file Nile.png :session *R* :results file graphics output :exports both
        hist(Nile)
      #+end_src

      #+RESULTS:
      [[file:Nile.png]]

   5. If you don't see a file then your Org-mode buffer and the =*R*=
      session console are not in sync, and you need to change working
      directory to where you're putting the file: in the case of =:file
      Nile.png= you're putting it into =pwd= or =$PWD= (present working
      directory). To check the directory of your file:
      #+begin_src bash :results output :exports both
        pwd
      #+end_src

      #+RESULTS:
      : /home/marcus/GitHub/dviz/org

   6. Open the =*R*= buffer, check its =$PWD= with one of these R commands:
      #+begin_src R :session *R* :results output :exports both
        getwd()
        system("echo $PWD")
      #+end_src

      #+RESULTS:
      : [1] "/home/aletheia/GitHub/admin/RoamNotes"
      : /home/aletheia/GitHub/admin/RoamNotes

   7. To change the R console's =$PWD=, use =setwd= and pass the directory
      you want to point at as a string with the (relative) =PATH=
      argument (as long as the location exists):
      #+begin_src R :session *R* :results output :exports both
        getwd()  # where you were
        setwd("../../dviz/org")  # relative path to where the Org-mode file is
        getwd()  # check where you are
      #+end_src

      #+RESULTS:
      : [1] "/home/aletheia/GitHub/admin/RoamNotes"
      : [1] "/home/aletheia/GitHub/dviz/org"

   8. The absolute path would work, too (as long as it
      exists). Relocating to where you already are does nothing.
      #+begin_src R :session *R* :results output :exports both
        setwd("/home/aletheia/GitHub/dviz/org")  # relative path to where the Org-mode file is
        system("pwd")
      #+end_src

      #+RESULTS:
      : /home/aletheia/GitHub/dviz/org


** DONE Chart and Shell Exercise

1. Close your R console. (=C-x k=)

2. Go to your home directory (=C-x d ~/=)

3. Make a new directory in the =Dired= buffer with =+ org=

4. Find the directory and go into it

5. In =~/org=, create a file =test.org=

6. In =test.org=, open a graphic R code block

7. Set the file header argument so that you get a PNG file

8. Create a sorted dot plot of the length of the guinea pig teeth
   from the =ToothGrowth= dataset:
   #+begin_example R
     dotchart(sort(ToothGrowth$len))
   #+end_example

9. When asked for the "R starting project directory", modify the
   offered address and change it from =~/org= to =~/=

10. Open the file with =<F6>=. You shouldn't see anything

11. Split the screen and open the R console in one, and the file
    =test.org= in the other buffer

12. You should see that =*R*= is set to your =$HOME=.

13. Create another (non-graphic) R code block (keep =*R*= open)

14. In the other code block check where you are - both with an R
    function, and with a =system= command

15. You know that your test file is in =~/org=. Now set the working
    directory to that directory using a /relative path/, and check the
    new location.

16. Re-run the graphics command from earlier and open the PNG file
    with =<F6>=.

17. Make sure that you understand everything we're doing here! Create
    your own examples!


** TODO Review: DataCamp lesson "The Color and the Shape"

*** What's the problem with 3D scatter plots?
#+begin_quote
A three-dimensional object on a two-dimensional screen is hard to
interpret because you lose the sense of perspective or depth
perception.
#+end_quote

Code example:
#+begin_src R :file 3d_scatterplot.png :session *R* :results file graphics output :exports both
  library(scatterplot3d)

  scatterplot3d(mtcars$wt, mtcars$mpg, mtcars$hp,
                color = as.numeric(mtcars$cyl))
#+end_src

#+RESULTS:
[[file:3d_scatterplot.png]]

*** What are visual dimensions for scatter plots besides spatial dimensions?
#+begin_quote
- Color
- Size
- Transparency
- Shape
#+end_quote
*** Code examples
**** Color
#+begin_src R :file colorPlot.png :session *R* :results file graphics output :exports both
  plot(mtcars$wt, mtcars$mpg,
       col = as.factor(mtcars$cyl),
       xlab = "Weight [tons]", ylab = "Miles-per-gallon")
#+end_src

#+RESULTS:
[[file:colorPlot.png]]

**** Size
#+begin_src R :file sizePlot.png :session *R* :results file graphics output :exports both
  point_sizes <- mtcars$cyl / max(mtcars$cyl) * 3

  plot(mtcars$wt, mtcars$mpg,
       cex = point_sizes,
       xlab = "Weight", ylab = "MPG")
#+end_src

#+RESULTS:
[[file:sizePlot.png]]

**** Transparency
#+begin_src R :file transPlot.png :session *R* :results file graphics output :exports both
  transparency <- mtcars$cyl / max(mtcars$cyl)

  plot(mtcars$wt, mtcars$mpg,
       col = rgb(1, 0, 0, alpha = transparency),
       pch = 19, cex=2,
       xlab = "Weight", ylab = "MPG")
#+end_src

#+RESULTS:
[[file:transPlot.png]]

**** Shape
#+begin_src R :file shapePlot.png :session *R* :results file graphics output :exports both
  shapes <- as.numeric(as.factor(mtcars$cyl))

  ## Create scatter plot with shapes based on mtcars$cyl
  plot(mtcars$wt, mtcars$mpg,
       pch = shapes,  ## Adjust shape based on cylinder count
       cex = 2,
       col = "blue",  ## Fixed color
       xlab = "Weight", ylab = "MPG")
#+end_src

#+RESULTS:
[[file:shapePlot.png]]

*** What are visual dimensions for line plots?
#+begin_quote
- Color
- Thickness
- Transparency
- Line type (solid, dashes, dots)
#+end_quote
*** Code examples
**** Color
#+begin_src R :file lineColor.png :session *R* :results file graphics output :exports both
  plot(Nile,
       col="red")
#+end_src

#+RESULTS:
[[file:lineColor.png]]

**** Thickness
#+begin_src R :file lineThick.png :session *R* :results file graphics output :exports both
  plot(Nile,
       lwd=3)
#+end_src

#+RESULTS:
[[file:lineThick.png]]

**** Transparency
#+begin_src R :file lineTrans.png :session *R* :results file graphics output :exports both
  plot(Nile,
       lwd=3,
       col = rgb(1, 0, 0, alpha=0.2))
#+end_src

#+RESULTS:
[[file:lineTrans.png]]

**** Line type
#+begin_src R :file lineType.png :session *R* :results file graphics output :exports both
  plot(Nile,
       lty=2)
#+end_src

#+RESULTS:
[[file:lineType.png]]

*** What does this plot (from the DataCamp lesson) suggest? How would you critique it?
#+attr_html: :width 400px:
[[../img/color2.png]]

#+begin_quote
"The longer someone goes to school in a wealthy country, the longer
he'll live." = Life expectancy, wealth index, schooling length are
positively correlated.

- We don't know what "schooling" means
- We don't know the definition or distribution of GNI or life
  expectancy
- We don't know how or when these data were collected.
#+end_quote


* Week 4 - Exploratory Data Analysis (EDA)

** TODO Exploratory Data Analysis (EDA) with R (Lecture & practice)
#+attr_html: :width 600px:
[[../img/jules_verne.jpg]]

/Image: Les illustrations de Jules Verne - Voyages Extraordinaires./

- [ ] *Practice:* meta data
- [ ] Missing values (=NA=)
- [ ] Categorical variables and =factor= vectors
- [ ] *Practice:* Plotting the Anscombe Quartet
- [ ] Raw vs. transformed data
- [ ] Math revision: logarithm and power laws
- [ ] The case for R
- [ ] Installing and loading R packages
- [ ] *Practice:* Using Rterm and Rgui
- [ ] Questions to ask from data
- [ ] *Practice:* A representative R session
