#+TITLE:Practice: A Representative R Session
#+AUTHOR: [your name here]
#+SUBTITLE: Data visualization (DSC 302) Fall 2022
#+OPTIONS: toc:1 num:1 ^:nil
#+startup: overview hideblocks indent entitiespretty: 
* README

- Practice instructions for the data visualization lectures
- Emacs + ESS + Org-mode and R must be installed
- Upload the completed practice file to Canvas

  #+name: tab:3_practice
  | PRACTICE         | MIN |
  |------------------+-----|
  | Prerequisites    |  15 |
  | Loading packages |  15 |
  | Looking at data  |  15 |
  | Factors vectors  |  15 |
  | Summary stats    |  15 |
  | Boxplots         |  10 |
  | Scatterplots     |  10 |
  | Bar charts       |  10 |
  | Customization    |  15 |
  |------------------+-----|
  | TOTAL            | 120 |
  #+TBLFM: @11$2=vsum(@2..@10)

* IDENTIFY YOURSELF

- Update the ~#+AUTHOR:~ information in the header
- Add this on a line to the header of this file :
  ~#+STARTUP: overview hideblocks indent~
- With the cursor on theline, activate the header line with ~C-c C-c~.
- Put your cursor on the headline of this section, and type ~S <LEFT>~
  until you see ~DONE~ instead of ~TODO~ next to the title.
- Perform this last step each time you complete a section.

* PREREQUISITES

1) Check that R is installed on your machine. All of these are
   equivalent but lead to different interfaces:
   - [ ] open Emacs and open an R session with ~M-x R~
   - [ ] open the CMD line terminal and enter the command ~R~
   - [ ] open the CMD line terminal and enter the command ~Rgui~

2) Check that you can execute R code blocks inside Emacs: execute the
   following code block named [[version]] by moving the cursor anywhere on
   the block - either on the metadata or on the line of code - and
   enter ~C-c C-c~.

   The ~result~ of [[version]] is R ~version~ information. Because of the
   output size, it is automatically wrapped in an ~example~ block.

   #+name: version
   #+begin_src R :results output
     version
   #+end_src

3) Do you notice anything special about this last code block? Write
   it in /italics/ into a "quote" block below (create with =<q TAB=):

4) Alternatively to executing the block in the Org-mode buffer, you
   can move the cursor on the block and enter ~C-c '~. This will open
   the source code in a new buffer where you can execute it or edit
   it. This time, the output will appear in the ~*R*~ buffer instead of
   the Org-mode file.

5) If R is not installed, you need to install it. If you cannot
   execute R code blocks, you are probably missing the correct Emacs
   init file ~/.emacs~: you can [[https://tinyurl.com/lyon-emacs][tinyurl.com/lyon-emacs]]. You might also
   miss the ESS (Emacs Speaks Statistics) package. Try ~M-x
   load-library ESS RET~ to check that you have it, otherwise,
   install it with =M-x list-packages=.

6) If you're in an R session now, exit by entering ~q()~. R is
   case-sensitive, so this must be lower-case. When asked if you
   want to save the workspace, say *no*[fn:1].

7) To get to the footnote at the end of the last sentence, move the
   cursor on it and enter =C-c C-o= (same command as opening a link or
   an image). You return here with =C-c &=.

* LOADING PACKAGES

We work with the =whiteside= data frame from the ~MASS~ package. You
have to load the package to access the data set.

1) Open an R session or shell buffer in Emacs with ~M-x R~. You will be
   asked for the project directory in the Emacs minibuffer. Accept
   whatever choice is given to you.

2) The screen is now split and you see the R shell below. The first
   command (~setwd~) sets the working directory. At the ~>~ prompt, enter:
   ~??whiteside~. The command ~??~ performs a fuzzy search through all
   packages available for your R session.

3) If the ~MASS~ package is not installed, ~??~ will not find anything. In
   this case, install it with the command
   ~install.packages(MASS)~ [fn:2].

4) Once the package is installed, try ~??whiteside~ again. Open the link
   ~MASS::whiteside~ in the web page that appears to get a short
   description of the dataset and read it[fn:3].

5) To analyse the dataset, it needs to be loaded. To do this, load
   the ~MASS~ package with the ~library~ command and confirm with
   ~search()~, which lists all packages that have been loaded.

   Run the code chunk below with ~C-c C-c~ [fn:4] - if you cannot see
   the code but instead see a line ending with ~...~, bring the cursor
   to that line and open the section with the ~<TAB>~ key.

   #+begin_src R :results output
     library(MASS)
     search()
   #+end_src

6) You can also use the functions =any=, =grep= and =search= to check that
   =MASS= is loaded:
   #+begin_src R :session *R* :results output :exports both
     s <- search()
     p <- "MASS"
     g <- grep(p,s)
     any(g)  # same as any(grep("MASS",search()))
   #+end_src

7) In the next code block, try to get the same result but with a
   one-line command (without storing any objects in the process):
   #+begin_src R :session *R* :results output :exports both

   #+end_src

8) Interactions with the OS like loading a package are not
   remembered by the system unless they are tied to a named R
   session. In the code block below, replace ~???~ with the
   name of the R session that you started in (1), e.g. ~*R*~. Then
   run the code block again with ~C-c C-c~.

   #+begin_src R :session ??? :results output
     library(MASS)
     search()
   #+end_src

9) What happens if you just run the block with =C-c C-c= ?

10) Check your buffer list with =C-x C-b= (to return to the last or any
    other open buffer, use =C-x b= instead).

* LOOKING AT DATA

Before working with a data set, you need to take at least a
superficial view at its entries (values).

1) Display the first six records of the ~whiteside~ data frame. Run
   the code block [[head]] below with ~C-c C-c~.

   #+name: head
   #+begin_src R :session *R* :results output
     library(MASS)
     head(whiteside)
   #+end_src

   #+RESULTS: head
   :    Insul Temp Gas
   : 1 Before -0.8 7.2
   : 2 Before -0.7 6.9
   : 3 Before  0.4 6.4
   : 4 Before  2.5 6.0
   : 5 Before  2.9 5.8
   : 6 Before  3.2 5.8

2) Show only the first three records using ~head~, by adding the
   argument ~n=3~ to the function call in [[head1]] below, and run the
   block. Attributes are separated by commata: ~f(x=..., n=...)~

   #+name: head1
   #+begin_src R :session *R* :results output
     head(x=whiteside,n=3)  # show first n=3 lines of x
   #+end_src

   #+RESULTS: head1
   :    Insul Temp Gas
   : 1 Before -0.8 7.2
   : 2 Before -0.7 6.9
   : 3 Before  0.4 6.4

3) Show the last three records using the function ~tail~ using the block
   [[tail]], and a pipe (=|>=), and run the block.

   #+name: tail
   #+begin_src R :session *R* :results output
     whiteside |> tail(n=3)
   #+end_src

   #+RESULTS: tail
   :    Insul Temp Gas
   : 54 After  8.7 2.8
   : 55 After  8.8 1.3
   : 56 After  9.7 1.5

4) What does the first line of the data frame show? What do the
   following lines show? How many lines are there?

   #+begin_quote
   - *The first line shows* the names of field/variables/features recorded
   - *The following lines show* the first n records of the observations
   #+end_quote

5) What data does the data frame ~whiteside~ contain?

   #+begin_quote
   The ~whiteside~ data frame shows the weekly average heating gas
   consumption and the weekly average outside temperature (in
   Celsius), for two successive winters, the first is before, and the
   second after Whiteside installed insulation in his house.
   #+end_quote

* FACTOR VECTORS

To get a more detailed view at the data frame, we display its
structure using the generic[fn:5] ~str~ function.

1) Create a named R code block called ~structure~ by entering ~<s
   TAB~. Add the header arguments[fn:6]:

   #+begin_example
   R :session *R* :results output
   #+end_example

   /Note:/ ~*R*~ should be the name of your R session buffer. If you don't
   have one yet, running the code block will create one, and you don't
   have to name the ~:session~ in the header.

   /[In class, we should have defined =<r= as a template.]/

   ----- PUT YOUR CODE BELOW THIS LINE -----

   #+name: structure
   #+begin_src R :session *R* :results output
     str(whiteside)
   #+end_src

   #+RESULTS: structure
   : 'data.frame':      56 obs. of  3 variables:
   :  $ Insul: Factor w/ 2 levels "Before","After": 1 1 1 1 1 1 1 1 1 1 ...
   :  $ Temp : num  -0.8 -0.7 0.4 2.5 2.9 3.2 3.6 3.9 4.2 4.3 ...
   :  $ Gas  : num  7.2 6.9 6.4 6 5.8 5.8 5.6 4.7 5.8 5.2 ...

2) In the code block ~structure~, make a function call of ~str~ to the
   data frame ~whiteside~ to compactly display its structure, and run
   the code with ~C-c C-c~. Make sure you understand the output.

3) The variable ~Insul~ is a /factor/, a vector used to represent
   /categorical/ variables. You can extract its values (called /levels/):

   First, store the values of the =Insul= factor in an object =x=.

   Next, print the structure of the factor.

   #+name: extract
   #+begin_src R :session *R* :results output
     whiteside$Insul -> x
     str(x)
     str(3)
   #+end_src

   #+RESULTS: extract
   :  Factor w/ 2 levels "Before","After": 1 1 1 1 1 1 1 1 1 1 ...
   :  num 3

4) ~levels~ defined for a ~factor~ vector represent its only possible
   values. Trying to insert a new value as in the code block [[unknown]]
   generates an error message: run the code block.

   #+name: unknown
   #+begin_src R :session *R* :results output
     x[2] <- "Unknown"
   #+end_src

   #+RESULTS: unknown
   : Warning message:
   : In `[<-.factor`(`*tmp*`, 2, value = "Unknown") :
   :   invalid factor level, NA generated

5) This is so because =x= is a =factor=. Show this by printing its
   object =class= and by printing the value of =is.factor= of =x=.
   #+begin_src R :session *R* :results output :exports both
     class(x)
     is.factor(x)
   #+end_src

   #+RESULTS:
   : [1] "factor"
   : [1] TRUE

6) We can use the function ~as.character~ to convert the ~factor~ into a
   ~character~ variable. Now, the redefinition works. Run the block [[char]].

   1. Store =whiteside$Insul= =as.character= in =x=.
   2. Print the structure of =x= - it's now a =character= vector.
   3. Now replace =x[2]= by ="Unknown"=.
   4. Print the structure of =x= again to check the insertion.

   #+name: char
   #+begin_src R :session *R* :results output
     whiteside$Insul -> x
     str(x)
     as.character(x) -> x
     str(x)
     "Unknown" -> x[2]
     str(x)
     as.factor(x) -> x
     str(x)
   #+end_src

   #+RESULTS: char
   :  Factor w/ 2 levels "Before","After": 1 1 1 1 1 1 1 1 1 1 ...
   :  chr [1:56] "Before" "Before" "Before" "Before" "Before" "Before" "Before" "Before" "Before" ...
   :  chr [1:56] "Before" "Unknown" "Before" "Before" "Before" "Before" "Before" "Before" "Before" ...
   :  Factor w/ 3 levels "After","Before",..: 2 3 2 2 2 2 2 2 2 2 ...

* SUMMARY STATS

R is strong on statistics. The ~summary~ function returns simple
statistical properties of each variable.

1. Create a named code block ~summary~. In it, call the function
   ~summary~ on the ~whiteside~ data frame. Open the explanatory notes
   below with ~<TAB>~.

   ----- PUT YOUR CODE BELOW THIS LINE -----

   #+name: summary
   #+begin_src R :session *R* :results output :exports both :noweb yes
     summary(whiteside)
   #+end_src

   #+RESULTS: summary
   :     Insul         Temp             Gas
   :  Before:26   Min.   :-0.800   Min.   :1.300
   :  After :30   1st Qu.: 3.050   1st Qu.:3.500
   :              Median : 4.900   Median :3.950
   :              Mean   : 4.875   Mean   :4.071
   :              3rd Qu.: 7.125   3rd Qu.:4.625
   :              Max.   :10.200   Max.   :7.200

   #+begin_notes
   The output contains the ~mean~ (average of the variable ~x~ over all
   records), and /Tukey's five-number summary/[fn:7].

   - /sample minimum/: smallest number in the dataset
   - /lower quartile/: value for which 25% are smaller or equal
   - /upper quartile/: value for which 75% are smaller or equal
   - /sample median/: middle value of the data set
   - /sample maximum/: larges value in the dataset
   #+end_notes

2. Below, create a =quote= block with =<q TAB=. In the block, write an
   observation of the =summary= data - at least one sentence for each
   variable that would help someone else reading this =summary=
   understand what he sees.

   #+begin_quote
   1. There are few observations without than with insulation.

   2. The temperature ranged between a little below freezing (0C)
      and cool (10C) and the average is 4C.

   3. The distribution is clustered around the average - the range
      (in cubic feet) is considerable: [1.3,7.2].

   4. The measurements are accurate to the third decimal!
   #+end_quote

* BOXPLOTS

We'll finish this practice run with a few glimpses into R's graphics
capabilities.

Following up from the output of ~summary~, a ~boxplot~ is a
graphical representation of Tukey's five-number summary.

#+begin_src R :session *R* :results output :exports both :noweb yes
  summary(whiteside)
#+end_src

#+RESULTS:
:     Insul         Temp             Gas
:  Before:26   Min.   :-0.800   Min.   :1.30000000000
:  After :30   1st Qu.: 3.050   1st Qu.:3.50000000000
:              Median : 4.900   Median :3.95000000000
:              Mean   : 4.875   Mean   :4.07142857143
:              3rd Qu.: 7.125   3rd Qu.:4.62500000000
:              Max.   :10.200   Max.   :7.20000000000

1) Run the code block [[boxplot]] below to generate a ~boxplot~[fn:8]. Open
   the graphical result with ~<F6>~ and close it again with ~<F7>~[fn:9].

   #+name: boxplot
   #+begin_src R :session *R* :results output graphics file :file boxplot1.png
     boxplot(Gas ~ Insul, data = whiteside,horizontal=TRUE)
     avg_Gas <- mean(whiteside$Gas)
     abline(v = avg_Gas, col="blue", lwd=4, lty=2)
   #+end_src

   #+RESULTS: boxplot
   [[file:boxplot1.png]]

   Where the hell am I?
   #+begin_src bash
     pwd
   #+end_src

   #+RESULTS:
   : /home/marcus/GitHub/dviz/org

   #+begin_notes
   In the boxplot, the "whiskers" at the top and the bottom represent
   the sample *minimum* and *maximum*. The "box" is bounded by the *upper
   quartile* at the top, and by the *lower quartile* at the bottom. The
   thick line in the middle is the *median* value. In the ~After~ level on
   the right hand side of the plot you see an open circle at the
   bottom: that's an *outlier*, which is "unusually small". The sample
   minimum therefore is the "smallest non-outlying value", and not the
   true minimum[fn:10].
   #+end_notes

2) Create a boxplot ~boxplot2.png~, that shows the variable ~Temp~ instead
   of ~Gas~. Only a small change is necessary to do this.

   ----- PUT YOUR CODE BELOW THIS LINE -----

   #+begin_src R :file TempInsul.png :session *R* :results output graphics file
     boxplot(Temp ~ Insul, data=whiteside)
   #+end_src

   #+RESULTS:
   [[file:TempInsul.png]]

3) When comparing with the output of ~summary~, we're missing the
   average value, or ~mean~. Modify your code blocks by adding these two
   lines below the ~boxplot~ command, and run each block again: the
   ~abline~ function simply draws a horizontal line at the average.

   #+name: avg_Gas
   #+begin_example R
     avg_Gas <- mean(whiteside$Gas)
     abline(h = avg_Gas, col="blue", lwd=2)
   #+end_example

   #+name: avg_Temp
   #+begin_example R
     avg_Temp <- mean(whiteside$Temp)
     abline(h = avg_Temp, col="blue", lwd=2)
   #+end_example

4) Can you transfer this to recreating the boxplot for the =ToothGrowth=
   data set, showing the distributions of the length (=len=) of the
   teeth as a function of the Vitamin C supply type (=supp=)?

   #+begin_src R :file toothbox.png :session *R* :results file graphics output :exports both
     boxplot(len ~ supp, data=ToothGrowth,horizontal=TRUE)
     abline(v=mean(ToothGrowth$len),
            col="red",
            lty=4,
            lwd=4)
   #+end_src

   #+RESULTS:
   [[file:toothbox.png]]

   Add the average length as a thick dashed red line to the plot.

   #+begin_src R :session *R* :results output :exports both :noweb yes
     str(ToothGrowth)
   #+end_src

   #+RESULTS:
   : 'data.frame':      60 obs. of  3 variables:
   :  $ len : num  4.2 11.5 7.3 5.8 6.4 10 11.2 11.2 5.2 7 ...
   :  $ supp: Factor w/ 2 levels "OJ","VC": 2 2 2 2 2 2 2 2 2 2 ...
   :  $ dose: num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ...

4) Is =boxplot= a "generic" R function? How could you find out?
   #+begin_src R :session *R* :results output :exports both :noweb yes
     methods(boxplot)
   #+end_src

   #+RESULTS:
   : [1] boxplot.default  boxplot.formula* boxplot.matrix
   : see '?methods' for accessing help and source code

* SCATTERPLOTS

The ~plot~ function is another versatile, generic function in R. Applied
to a data frame, it produces a matrix of /scatterplots/, showing how
each variable relates to the others.

1) Run the code block named [[plot]] below. Open the notes to see the
   explanation of this /scatterplot/ matrix with ~<TAB>~.

   #+name: plot
   #+begin_src R :file plotWhiteside.png :session *R* :results output graphics file 
     library(MASS)
     plot(whiteside) # so called "pair plot'
   #+end_src

   #+RESULTS: plot
   [[file:plotWhiteside.png]]

   #+begin_notes
   The diagonal elements of the output identify the x-axis in all
   plots of that column, and the y-axis in all the other plots of
   that row. E.g. the matrix element ~[3,2]~ (3rd row, 2nd column)
   below the diagonal element ~Temp~ plots ~y = Gas~ against ~x = Temp~,
   while the element ~[2,3]~ (2nd row, 3rd column) plots ~y = Temp~
   against ~x = Gas~.

   In the four plots involving the ~factor~ variable ~Insul~, the two
   ~levels~ of ~Insul~, ~Before~ and ~After~ are represented by 1
   and 2. You can e.g. see at one glance from ~[3,1]~ or ~[1,3]~ that
   the ~Gas~ values are smaller when ~Insul = 2~, i.e. less heating gas
   was consumed after insulation was installed than before.
   #+end_notes

2) Create another code block ~plot1~ that uses ~plot~ to plot only the
   ~Temp~ variable of the ~whiteside~ data set. Can you explain the graph?
   /Tip:/ Use =sort= to sort the values and plot again.

   ----- PUT YOUR CODE BELOW THIS LINE -----

   #+begin_src R :file plot1.png :session *R* :results output graphics file
     plot(sort(whiteside$Temp))
   #+end_src

   #+RESULTS:
   [[file:plot1.png]]

   #+begin_notes
   The left set of data points represents the 26 values with
   ~Insul=Before~, the right set of data points represents the 30 values
   with ~Insul=After~. These points represent average weekly winter
   temperatures recorded before and after the wall insulation in
   Whiteside's house. The observations are ordered from coldest to
   warmest within each heating season.
   #+end_notes

- Use =sort= to sort the values of =whiteside$Temp=.

- How =sort= works:
  #+begin_src R :session *R* :results output :exports both :noweb yes
    c(4,5,1,2,4,5,3) |> sort()
    sort(c(4,5,1,2,4,5,3))
  #+end_src

  #+RESULTS:
  : [1] 1 2 3 4 4 5 5
  : [1] 1 2 3 4 4 5 5

- To distinguish which points belong to "Before" vs. "After", use color
  #+begin_src R :file color1.png :session *R* :results output graphics file
    colors <- ifelse(whiteside$Insul == "Before",
                     "red",   # before
                     "blue")  # after
    plot(whiteside$Temp,
         col=colors,      # pick color according to `colors`
         pch=16)  # solid points
  #+end_src

  #+RESULTS:
  [[file:color1.png]]

- Another way to this (without =ifelse=) converts the =factor= into a
  =numeric= vector:
  #+begin_src R :file color2.png :session *R* :results output graphics file
    plot(whiteside$Temp,
         col=c("red","blue")[unclass(whiteside$Insul)],
         pch=16)
  #+end_src  

  #+RESULTS:
  [[file:color2.png]]

* BARCHARTS

When applying ~plot~ to a categorical variable, you get a /barchart/.

1) Use ~plot~ to plot the ~Insul~ variable of the ~whiteside~ dataset
   only. Put the code in the code block [[barchart]] below and run it.
2) Open and close the inline image that is generated for inspection
3) Open and close the explanation in the notes.

   #+name: barchart
   #+begin_src R :file barInsul.png :session *R* :results output graphics file
     plot(whiteside$Insul,
          main="Measurements before and after insulation\
     of house walls from the `whiteside` datset.",
     ylab="Number of measurements")
   #+end_src

   #+RESULTS: barchart
   [[file:barInsul.png]]

   #+begin_notes
   The chart shows the number of measurements before and after the wall
   insulation of Whiteside's house, made over two consecutive heating
   periods.
   #+end_notes

   Is =barplot= generic?
   #+begin_src R :session *R* :results output :exports both :noweb yes
     methods(barplot)
   #+end_src

   #+RESULTS:
   : [1] barplot.default  barplot.formula*
   : see '?methods' for accessing help and source code

   #+begin_src R :file barplot.png :session *R* :results output graphics file
     barplot(whiteside$Insul)
   #+end_src

   #+RESULTS:
   [[file:barplot.png]]

* CUSTOMIZATION

Three extensions to the scatterplots shown: changing plotting symbols,
the inclusion of a legend, and linear regression reference
lines.

1) Run [[custom1]] to create a scatterplot of ~Gas~ vs. ~Temp~ from ~whiteside~,
   with distinct point shapes (~pch~) for the ~Before~ and ~After~ data
   subsets.

   - Open the code block with ~<TAB>~ to look at it
   - Run the code block with ~C-c C-c~
   - Open / close the inline image with ~<F6>~ / ~<F7>~
   - Open the image in a separate window by putting the cursor on the
     link and typing ~C-c C-o~ (or ~M-x org-open-at-point~).

   #+name: custom1
   #+begin_src R :session *R* :results output graphics file :file custom1.png
     plot(x = whiteside$Temp,
          y = whiteside$Gas,
          pch = c(6,16)[whiteside$Insul])  # could use 'col' instead
   #+end_src
   
   #+RESULTS: custom1
   [[file:custom1.png]]

   How are the colors stored anyway?
   #+begin_src R :session *R* :results output :exports both :noweb yes
     colors()
   #+end_src

   #+RESULTS:
   #+begin_example
     [1] "white"                "aliceblue"            "antiquewhite"         "antiquewhite1"       
     [5] "antiquewhite2"        "antiquewhite3"        "antiquewhite4"        "aquamarine"          
     [9] "aquamarine1"          "aquamarine2"          "aquamarine3"          "aquamarine4"         
    [13] "azure"                "azure1"               "azure2"               "azure3"              
    [17] "azure4"               "beige"                "bisque"               "bisque1"             
    [21] "bisque2"              "bisque3"              "bisque4"              "black"               
    [25] "blanchedalmond"       "blue"                 "blue1"                "blue2"               
    [29] "blue3"                "blue4"                "blueviolet"           "brown"               
    [33] "brown1"               "brown2"               "brown3"               "brown4"              
    [37] "burlywood"            "burlywood1"           "burlywood2"           "burlywood3"          
    [41] "burlywood4"           "cadetblue"            "cadetblue1"           "cadetblue2"          
    [45] "cadetblue3"           "cadetblue4"           "chartreuse"           "chartreuse1"         
    [49] "chartreuse2"          "chartreuse3"          "chartreuse4"          "chocolate"           
    [53] "chocolate1"           "chocolate2"           "chocolate3"           "chocolate4"          
    [57] "coral"                "coral1"               "coral2"               "coral3"              
    [61] "coral4"               "cornflowerblue"       "cornsilk"             "cornsilk1"           
    [65] "cornsilk2"            "cornsilk3"            "cornsilk4"            "cyan"                
    [69] "cyan1"                "cyan2"                "cyan3"                "cyan4"               
    [73] "darkblue"             "darkcyan"             "darkgoldenrod"        "darkgoldenrod1"      
    [77] "darkgoldenrod2"       "darkgoldenrod3"       "darkgoldenrod4"       "darkgray"            
    [81] "darkgreen"            "darkgrey"             "darkkhaki"            "darkmagenta"         
    [85] "darkolivegreen"       "darkolivegreen1"      "darkolivegreen2"      "darkolivegreen3"     
    [89] "darkolivegreen4"      "darkorange"           "darkorange1"          "darkorange2"         
    [93] "darkorange3"          "darkorange4"          "darkorchid"           "darkorchid1"         
    [97] "darkorchid2"          "darkorchid3"          "darkorchid4"          "darkred"             
   [101] "darksalmon"           "darkseagreen"         "darkseagreen1"        "darkseagreen2"       
   [105] "darkseagreen3"        "darkseagreen4"        "darkslateblue"        "darkslategray"       
   [109] "darkslategray1"       "darkslategray2"       "darkslategray3"       "darkslategray4"      
   [113] "darkslategrey"        "darkturquoise"        "darkviolet"           "deeppink"            
   [117] "deeppink1"            "deeppink2"            "deeppink3"            "deeppink4"           
   [121] "deepskyblue"          "deepskyblue1"         "deepskyblue2"         "deepskyblue3"        
   [125] "deepskyblue4"         "dimgray"              "dimgrey"              "dodgerblue"          
   [129] "dodgerblue1"          "dodgerblue2"          "dodgerblue3"          "dodgerblue4"         
   [133] "firebrick"            "firebrick1"           "firebrick2"           "firebrick3"          
   [137] "firebrick4"           "floralwhite"          "forestgreen"          "gainsboro"           
   [141] "ghostwhite"           "gold"                 "gold1"                "gold2"               
   [145] "gold3"                "gold4"                "goldenrod"            "goldenrod1"          
   [149] "goldenrod2"           "goldenrod3"           "goldenrod4"           "gray"                
   [153] "gray0"                "gray1"                "gray2"                "gray3"               
   [157] "gray4"                "gray5"                "gray6"                "gray7"               
   [161] "gray8"                "gray9"                "gray10"               "gray11"              
   [165] "gray12"               "gray13"               "gray14"               "gray15"              
   [169] "gray16"               "gray17"               "gray18"               "gray19"              
   [173] "gray20"               "gray21"               "gray22"               "gray23"              
   [177] "gray24"               "gray25"               "gray26"               "gray27"              
   [181] "gray28"               "gray29"               "gray30"               "gray31"              
   [185] "gray32"               "gray33"               "gray34"               "gray35"              
   [189] "gray36"               "gray37"               "gray38"               "gray39"              
   [193] "gray40"               "gray41"               "gray42"               "gray43"              
   [197] "gray44"               "gray45"               "gray46"               "gray47"              
   [201] "gray48"               "gray49"               "gray50"               "gray51"              
   [205] "gray52"               "gray53"               "gray54"               "gray55"              
   [209] "gray56"               "gray57"               "gray58"               "gray59"              
   [213] "gray60"               "gray61"               "gray62"               "gray63"              
   [217] "gray64"               "gray65"               "gray66"               "gray67"              
   [221] "gray68"               "gray69"               "gray70"               "gray71"              
   [225] "gray72"               "gray73"               "gray74"               "gray75"              
   [229] "gray76"               "gray77"               "gray78"               "gray79"              
   [233] "gray80"               "gray81"               "gray82"               "gray83"              
   [237] "gray84"               "gray85"               "gray86"               "gray87"              
   [241] "gray88"               "gray89"               "gray90"               "gray91"              
   [245] "gray92"               "gray93"               "gray94"               "gray95"              
   [249] "gray96"               "gray97"               "gray98"               "gray99"              
   [253] "gray100"              "green"                "green1"               "green2"              
   [257] "green3"               "green4"               "greenyellow"          "grey"                
   [261] "grey0"                "grey1"                "grey2"                "grey3"               
   [265] "grey4"                "grey5"                "grey6"                "grey7"               
   [269] "grey8"                "grey9"                "grey10"               "grey11"              
   [273] "grey12"               "grey13"               "grey14"               "grey15"              
   [277] "grey16"               "grey17"               "grey18"               "grey19"              
   [281] "grey20"               "grey21"               "grey22"               "grey23"              
   [285] "grey24"               "grey25"               "grey26"               "grey27"              
   [289] "grey28"               "grey29"               "grey30"               "grey31"              
   [293] "grey32"               "grey33"               "grey34"               "grey35"              
   [297] "grey36"               "grey37"               "grey38"               "grey39"              
   [301] "grey40"               "grey41"               "grey42"               "grey43"              
   [305] "grey44"               "grey45"               "grey46"               "grey47"              
   [309] "grey48"               "grey49"               "grey50"               "grey51"              
   [313] "grey52"               "grey53"               "grey54"               "grey55"              
   [317] "grey56"               "grey57"               "grey58"               "grey59"              
   [321] "grey60"               "grey61"               "grey62"               "grey63"              
   [325] "grey64"               "grey65"               "grey66"               "grey67"              
   [329] "grey68"               "grey69"               "grey70"               "grey71"              
   [333] "grey72"               "grey73"               "grey74"               "grey75"              
   [337] "grey76"               "grey77"               "grey78"               "grey79"              
   [341] "grey80"               "grey81"               "grey82"               "grey83"              
   [345] "grey84"               "grey85"               "grey86"               "grey87"              
   [349] "grey88"               "grey89"               "grey90"               "grey91"              
   [353] "grey92"               "grey93"               "grey94"               "grey95"              
   [357] "grey96"               "grey97"               "grey98"               "grey99"              
   [361] "grey100"              "honeydew"             "honeydew1"            "honeydew2"           
   [365] "honeydew3"            "honeydew4"            "hotpink"              "hotpink1"            
   [369] "hotpink2"             "hotpink3"             "hotpink4"             "indianred"           
   [373] "indianred1"           "indianred2"           "indianred3"           "indianred4"          
   [377] "ivory"                "ivory1"               "ivory2"               "ivory3"              
   [381] "ivory4"               "khaki"                "khaki1"               "khaki2"              
   [385] "khaki3"               "khaki4"               "lavender"             "lavenderblush"       
   [389] "lavenderblush1"       "lavenderblush2"       "lavenderblush3"       "lavenderblush4"      
   [393] "lawngreen"            "lemonchiffon"         "lemonchiffon1"        "lemonchiffon2"       
   [397] "lemonchiffon3"        "lemonchiffon4"        "lightblue"            "lightblue1"          
   [401] "lightblue2"           "lightblue3"           "lightblue4"           "lightcoral"          
   [405] "lightcyan"            "lightcyan1"           "lightcyan2"           "lightcyan3"          
   [409] "lightcyan4"           "lightgoldenrod"       "lightgoldenrod1"      "lightgoldenrod2"     
   [413] "lightgoldenrod3"      "lightgoldenrod4"      "lightgoldenrodyellow" "lightgray"           
   [417] "lightgreen"           "lightgrey"            "lightpink"            "lightpink1"          
   [421] "lightpink2"           "lightpink3"           "lightpink4"           "lightsalmon"         
   [425] "lightsalmon1"         "lightsalmon2"         "lightsalmon3"         "lightsalmon4"        
   [429] "lightseagreen"        "lightskyblue"         "lightskyblue1"        "lightskyblue2"       
   [433] "lightskyblue3"        "lightskyblue4"        "lightslateblue"       "lightslategray"      
   [437] "lightslategrey"       "lightsteelblue"       "lightsteelblue1"      "lightsteelblue2"     
   [441] "lightsteelblue3"      "lightsteelblue4"      "lightyellow"          "lightyellow1"        
   [445] "lightyellow2"         "lightyellow3"         "lightyellow4"         "limegreen"           
   [449] "linen"                "magenta"              "magenta1"             "magenta2"            
   [453] "magenta3"             "magenta4"             "maroon"               "maroon1"             
   [457] "maroon2"              "maroon3"              "maroon4"              "mediumaquamarine"    
   [461] "mediumblue"           "mediumorchid"         "mediumorchid1"        "mediumorchid2"       
   [465] "mediumorchid3"        "mediumorchid4"        "mediumpurple"         "mediumpurple1"       
   [469] "mediumpurple2"        "mediumpurple3"        "mediumpurple4"        "mediumseagreen"      
   [473] "mediumslateblue"      "mediumspringgreen"    "mediumturquoise"      "mediumvioletred"     
   [477] "midnightblue"         "mintcream"            "mistyrose"            "mistyrose1"          
   [481] "mistyrose2"           "mistyrose3"           "mistyrose4"           "moccasin"            
   [485] "navajowhite"          "navajowhite1"         "navajowhite2"         "navajowhite3"        
   [489] "navajowhite4"         "navy"                 "navyblue"             "oldlace"             
   [493] "olivedrab"            "olivedrab1"           "olivedrab2"           "olivedrab3"          
   [497] "olivedrab4"           "orange"               "orange1"              "orange2"             
   [501] "orange3"              "orange4"              "orangered"            "orangered1"          
   [505] "orangered2"           "orangered3"           "orangered4"           "orchid"              
   [509] "orchid1"              "orchid2"              "orchid3"              "orchid4"             
   [513] "palegoldenrod"        "palegreen"            "palegreen1"           "palegreen2"          
   [517] "palegreen3"           "palegreen4"           "paleturquoise"        "paleturquoise1"      
   [521] "paleturquoise2"       "paleturquoise3"       "paleturquoise4"       "palevioletred"       
   [525] "palevioletred1"       "palevioletred2"       "palevioletred3"       "palevioletred4"      
   [529] "papayawhip"           "peachpuff"            "peachpuff1"           "peachpuff2"          
   [533] "peachpuff3"           "peachpuff4"           "peru"                 "pink"                
   [537] "pink1"                "pink2"                "pink3"                "pink4"               
   [541] "plum"                 "plum1"                "plum2"                "plum3"               
   [545] "plum4"                "powderblue"           "purple"               "purple1"             
   [549] "purple2"              "purple3"              "purple4"              "red"                 
   [553] "red1"                 "red2"                 "red3"                 "red4"                
   [557] "rosybrown"            "rosybrown1"           "rosybrown2"           "rosybrown3"          
   [561] "rosybrown4"           "royalblue"            "royalblue1"           "royalblue2"          
   [565] "royalblue3"           "royalblue4"           "saddlebrown"          "salmon"              
   [569] "salmon1"              "salmon2"              "salmon3"              "salmon4"             
   [573] "sandybrown"           "seagreen"             "seagreen1"            "seagreen2"           
   [577] "seagreen3"            "seagreen4"            "seashell"             "seashell1"           
   [581] "seashell2"            "seashell3"            "seashell4"            "sienna"              
   [585] "sienna1"              "sienna2"              "sienna3"              "sienna4"             
   [589] "skyblue"              "skyblue1"             "skyblue2"             "skyblue3"            
   [593] "skyblue4"             "slateblue"            "slateblue1"           "slateblue2"          
   [597] "slateblue3"           "slateblue4"           "slategray"            "slategray1"          
   [601] "slategray2"           "slategray3"           "slategray4"           "slategrey"           
   [605] "snow"                 "snow1"                "snow2"                "snow3"               
   [609] "snow4"                "springgreen"          "springgreen1"         "springgreen2"        
   [613] "springgreen3"         "springgreen4"         "steelblue"            "steelblue1"          
   [617] "steelblue2"           "steelblue3"           "steelblue4"           "tan"                 
   [621] "tan1"                 "tan2"                 "tan3"                 "tan4"                
   [625] "thistle"              "thistle1"             "thistle2"             "thistle3"            
   [629] "thistle4"             "tomato"               "tomato1"              "tomato2"             
   [633] "tomato3"              "tomato4"              "turquoise"            "turquoise1"          
   [637] "turquoise2"           "turquoise3"           "turquoise4"           "violet"              
   [641] "violetred"            "violetred1"           "violetred2"           "violetred3"          
   [645] "violetred4"           "wheat"                "wheat1"               "wheat2"              
   [649] "wheat3"               "wheat4"               "whitesmoke"           "yellow"              
   [653] "yellow1"              "yellow2"              "yellow3"              "yellow4"             
   [657] "yellowgreen"
   #+end_example

2) In [[custom2]], a ~legend~ is added to the last scatterplot. The legend
   is laid on top of the plot using a vector of string values.

   #+name: custom2
   #+begin_src R :session *R* :results output graphics file :file custom2.png
     plot(x = whiteside$Temp,
          y = whiteside$Gas,
          pch = c(6,16)[whiteside$Insul])
     legend(x = "topright",
            legend=c("Insul = Before", "Insul = After"),
            pch = c(6,16))
   #+end_src

   #+RESULTS: custom2
   [[file:custom2.png]]

3) In [[custom3]], reference lines are added to the last scatterplot. The
   lines are drawn with different line types (~lty~). Two linear
   regression models (~lm~) are defined that fit the observed
   data[fn:11], and the ~abline~ function is used to draw the lines..

   #+name: custom3
   #+begin_src R :session *R* :results output graphics file :file custom3.png
     plot(x = whiteside$Temp,
          y = whiteside$Gas,
          pch = c(6,16)[whiteside$Insul],
          cex=2)
     legend(x = "topright",
            legend=c("Insul = Before", "Insul = After"),
            pch = c(6,16))
     model_1 <- lm(Gas~Temp,
                   data=whiteside,
                   subset=which(Insul == "Before"))
     model_2 <- lm(Gas~Temp,
                   data=whiteside,
                   subset=which(Insul == "After"))
     abline(model_1, lty=2,col="blue",lwd=3)
     abline(model_2,col="red",lwd=3)
   #+end_src

   #+RESULTS: custom3
   [[file:custom3.png]]

* TEST QUESTIONS

You now should be able to answer these test questions. You can find
short answers in the footnote[fn:12]:

1) What do you need to run R code blocks inside the GNU Emacs editor?

2) Which command lists all packages loaded in your current R session?

3) Which command lists the last six entries of a data frame?

4) Which command compactly displays the structure of any R object?

5) Which values are allowed for factor variables?

6) What is the output of the ~summary~ function?

7) What is a generic function in R?

8) What is a boxplot?

9) What is a matrix of scatterplots?

10) Which scatterplot customizations have you seen here?

* References

- Pearson (2018), EDA Using R, CRC Press, Chapter 1.3 (pp. 11-21).

* Footnotes

[fn:1]If you say yes, R will save a copy of all your commands in that
session in a file ~.Rhistory~, and it will save all data in a file
~.RData~ to recreate your work space the way you left it.

[fn:2]You can run this command in any case - installing ~MASS~ does not
take very long and re-installing the package does no harm, it only
takes time - unless your version of R is not in sync with the
package. In this case, install the =remotes= package first to install a
specific version of =MASS=.

[fn:3]The format of this documentation is common for R, and it
imitates the format of UNIX manual pages. After a /description/ and a
/usage/ note, the /format/ is described in terms of the variables. The
/source/ and /references/ given. At the end, the /examples/ section provides
examples, which sometimes can be called interactively with the ~example~
function, e.g. ~example(head)~.

[fn:4]In class, I often use the ~org-present~ package to present
Org-mode files and hide the metadata (e.g. for code blocks). If you
like this, see here for a tutorial including the code to put in your
~.emacs~ file.

[fn:5]To find out more about any R function, go to the console and
look up the help, as in ~help(str)~ or (equivalently) ~?str~. Generic
functions work with (almost) any R object, and their output depends on
the object type.

[fn:6]This Org-mode code block header argument lets the computer know
that you run R in a session buffer ~*R*~ and that you want to see the
results (if any) right here.

[fn:7]For factors, if the number of levels is > 6, only the five most
frequently occurring levels are listed, the others are lumped in one
'other' category. For L = 2 as here, all values are accounted for.

[fn:8]Notice the changed header arguments: ~:results output graphics
file~ to generate a graphics file, and ~:file boxplot.png~ as the file
name.

[fn:9]This key is bound to the Emacs Lisp function
~org-display-inline-images~. The key sequence ~C-c C-x C-v~ /toggles/ the
display of inline images (i.e. switches it on and off). ~<F6>~ only
makes the images visible, ~<F7>~ only makes them disappear.

[fn:10]Values that are at least 1.5 times the interquartile range
(IQR, difference between upper and lower quartile) above/below of the
upper/lower quartile are outliers.
#+begin_src R :session :results output graphics file :file ./img/boxplot3.png
  x <- c(0,0,2,5,8,8,8,9,9,10,10,10,11,12,12,12,14,15,20,25)
  boxplot(x)
#+end_src

#+RESULTS:
[[file:./img/boxplot3.png]]

In the example, the IQR=5, 1.5*IQR=6, therefore {0,0,20,25} are
outliers. The boxplot shows this.

[fn:11]One could also fit a single linear regression model to the data
set using the independent variables ~Temp~ and ~Insul~ as so-called
/predictors/, to predict the values of the measured/observed dependent
variable ~Gas~.

[fn:12]Answers: 1) Installed: R, Emacs + ESS; code block in an
Org-mode file; init commands in the ~~/.emacs~ file. 2) ~search()~. 3)
~tail~. 4) ~str~. 5) Only the values defined by the factor levels are
allowed. 6) The arithmetic mean and Tukey's five-point summary
(lower/upper quartile, min/max, median). 7) A function that accepts
different R objects (like a data frame) and returns different results
for each. 8) A graph displaying Tukey's five-point summary for an R
object, e.g. a data frame. 9) A matrix of scatterplots that shows how
each variable of a dataset relates to the others. 10) Changing
plotting symbols, including a legend, and drawing reference lines.
